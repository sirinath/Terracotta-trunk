Index: containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/internal/AbstractJBossInstalledLocalContainer.java
===================================================================
--- containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/internal/AbstractJBossInstalledLocalContainer.java	(revision 1460)
+++ containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/internal/AbstractJBossInstalledLocalContainer.java	(working copy)
@@ -114,12 +114,14 @@
             "--server=" + getConfiguration().getPropertyValue(GeneralPropertySet.HOSTNAME) + ":"
                 + getConfiguration().getPropertyValue(GeneralPropertySet.RMI_PORT));
 
+        
         AntContainerExecutorThread jbossRunner = new AntContainerExecutorThread(java);
         jbossRunner.start();
 
         // Sleep some extra time to fully ensure JBoss is stopped before giving back the control
         // to the user.
-        Thread.sleep(2000L);
+        Thread.sleep(3000L);
+        
     }
 
     /**
Index: containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/JBossStandaloneLocalConfiguration.java
===================================================================
--- containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/JBossStandaloneLocalConfiguration.java	(revision 1460)
+++ containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/JBossStandaloneLocalConfiguration.java	(working copy)
@@ -228,6 +228,21 @@
         getAntUtils().addTokenToFilterChain(filterChain, "cargo.jboss.binding.url",
             getFileHandler().getURL(bindingXmlFile));
 
+        
+        // Terracotta: setting jvmRoute
+        String[] jvmarg = getPropertyValue(GeneralPropertySet.JVMARGS).split("\\s+");
+        String jvmroute = getPropertyValue(GeneralPropertySet.HOSTNAME);
+        for (int i = 0; i < jvmarg.length; i++) {
+          if (jvmarg[i].indexOf("jvmroute") >= 0) {
+            String[] tokens = jvmarg[i].split("=");
+            if (tokens.length == 2) {
+              jvmroute = tokens[1];
+            }
+          }
+        }
+        getAntUtils().addTokenToFilterChain(filterChain, "jboss.jvmroute", jvmroute);
+       
+        
         getAntUtils().addTokenToFilterChain(filterChain, GeneralPropertySet.RMI_PORT,
             getPropertyValue(GeneralPropertySet.RMI_PORT));
 
Index: containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss4x/cargo-binding.xml
===================================================================
--- containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss4x/cargo-binding.xml	(revision 1460)
+++ containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss4x/cargo-binding.xml	(working copy)
@@ -173,6 +173,7 @@
 
      <xsl:output method="xml" />
      <xsl:param name="port"/>
+     <xsl:param name="jvmRoute"/>
 
      <xsl:variable name="portAJP" select="$port - 71"/>
      <xsl:variable name="portHttps" select="$port + 363"/>
@@ -206,6 +207,16 @@
          </Connector>
       </xsl:template>
 
+     <xsl:template match="Engine">
+       <Engine>
+         <xsl:attribute name="jvmRoute">@jboss.jvmroute@</xsl:attribute>
+         <xsl:for-each select="@*">
+           <xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>
+         </xsl:for-each>
+         <xsl:apply-templates/>
+       </Engine>
+     </xsl:template>
+     
      <xsl:template match="*|@*">
        <xsl:copy>
          <xsl:apply-templates select="@*|node()"/>
@@ -216,6 +227,7 @@
             </xslt-config>
          </delegate-config>
          <binding port="@cargo.servlet.port@"/>
+         <binding jvmRoute="@jboss.jvmroute@"/>
       </service-config>
 
    </server>
Index: containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/internal/AbstractCatalinaStandaloneLocalConfiguration.java
===================================================================
--- containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/internal/AbstractCatalinaStandaloneLocalConfiguration.java	(revision 1460)
+++ containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/internal/AbstractCatalinaStandaloneLocalConfiguration.java	(working copy)
@@ -35,230 +35,240 @@
 import org.codehaus.cargo.container.tomcat.Tomcat5xEmbeddedLocalContainer;
 
 import java.io.File;
+import java.util.Arrays;
+import java.util.Collections;
 import java.util.Iterator;
 
 /**
- * Catalina standalone {@link org.codehaus.cargo.container.spi.configuration.ContainerConfiguration}
+ * Catalina standalone
+ * {@link org.codehaus.cargo.container.spi.configuration.ContainerConfiguration}
  * implementation.
- *
- * @version $Id$
+ * 
+ * @version $Id: AbstractCatalinaStandaloneLocalConfiguration.java 1160
+ *          2006-07-30 20:15:34Z vmassol $
  */
-public abstract class AbstractCatalinaStandaloneLocalConfiguration
-    extends AbstractTomcatStandaloneLocalConfiguration
-{
-    /**
-     * {@inheritDoc}
-     * @see AbstractTomcatStandaloneLocalConfiguration#AbstractTomcatStandaloneLocalConfiguration(String)
-     */
-    public AbstractCatalinaStandaloneLocalConfiguration(String dir)
-    {
-        super(dir);
+public abstract class AbstractCatalinaStandaloneLocalConfiguration extends
+    AbstractTomcatStandaloneLocalConfiguration {
+  /**
+   * {@inheritDoc}
+   * 
+   * @see AbstractTomcatStandaloneLocalConfiguration#AbstractTomcatStandaloneLocalConfiguration(String)
+   */
+  public AbstractCatalinaStandaloneLocalConfiguration(String dir) {
+    super(dir);
 
-        setProperty(ServletPropertySet.USERS, "admin::manager");
-        setProperty(GeneralPropertySet.RMI_PORT, "8205");
-    }
+    setProperty(ServletPropertySet.USERS, "admin::manager");
+    setProperty(GeneralPropertySet.RMI_PORT, "8205");
+  }
 
-    /**
-     * {@inheritDoc}
-     * @see org.codehaus.cargo.container.spi.configuration.AbstractLocalConfiguration#configure(LocalContainer)
-     */
-    protected void doConfigure(LocalContainer container) throws Exception
-    {
-        setupConfigurationDir();
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.codehaus.cargo.container.spi.configuration.AbstractLocalConfiguration#configure(LocalContainer)
+   */
+  protected void doConfigure(LocalContainer container) throws Exception {
+    setupConfigurationDir();
 
-        FilterChain filterChain = createTomcatFilterChain();
+    FilterChain filterChain = createTomcatFilterChain();
 
-        getFileHandler().createDirectory(getHome(), "temp");
-        getFileHandler().createDirectory(getHome(), "logs");
+    getFileHandler().createDirectory(getHome(), "temp");
+    getFileHandler().createDirectory(getHome(), "logs");
 
-        String confDir = getFileHandler().createDirectory(getHome(), "conf");
+    String confDir = getFileHandler().createDirectory(getHome(), "conf");
 
-        getResourceUtils().copyResource(RESOURCE_PATH + container.getId() + "/server.xml",
-            new File(confDir, "server.xml"), filterChain);
+    getResourceUtils().copyResource(
+        RESOURCE_PATH + container.getId() + "/server.xml",
+        new File(confDir, "server.xml"), filterChain);
 
-        getResourceUtils().copyResource(RESOURCE_PATH + container.getId()
-            + "/tomcat-users.xml", new File(confDir, "tomcat-users.xml"), filterChain);
-        getResourceUtils().copyResource(RESOURCE_PATH + container.getId() + "/web.xml",
-            new File(confDir, "web.xml"));
+    getResourceUtils().copyResource(
+        RESOURCE_PATH + container.getId() + "/tomcat-users.xml",
+        new File(confDir, "tomcat-users.xml"), filterChain);
+    getResourceUtils().copyResource(
+        RESOURCE_PATH + container.getId() + "/web.xml",
+        new File(confDir, "web.xml"));
 
-        setupManager(container);
+    setupManager(container);
 
-        // deploy the web-app by copying the WAR file
-        setupWebApps(container);
-    }
+    // deploy the web-app by copying the WAR file
+    setupWebApps(container);
+  }
 
-    /**
-     * Setup the manager webapp.
-     *
-     * @param container the container to configure
-     */
-    protected abstract void setupManager(LocalContainer container);
+  /**
+   * Setup the manager webapp.
+   * 
+   * @param container
+   *          the container to configure
+   */
+  protected abstract void setupManager(LocalContainer container);
 
-    /**
-     * Setup the web apps directory and deploy applications.
-     *
-     * @param container the container to configure
-     */
-    private void setupWebApps(LocalContainer container)
-    {
-        try 
-        {
-            if (container instanceof EmbeddedLocalContainer)
-            {
-                // embedded Tomcat doesn't need CPC
-                Tomcat5xEmbeddedLocalDeployer deployer =
-                    new Tomcat5xEmbeddedLocalDeployer((Tomcat5xEmbeddedLocalContainer) container);
-                deployer.deploy(getDeployables());
-            }
-            else
-            {
-                // Create a webapps directory for automatic deployment of WARs dropped inside.
-                String appDir = getFileHandler().createDirectory(getHome(), "webapps");
+  /**
+   * Setup the web apps directory and deploy applications.
+   * 
+   * @param container
+   *          the container to configure
+   */
+  private void setupWebApps(LocalContainer container) {
+    try {
+      if (container instanceof EmbeddedLocalContainer) {
+        // embedded Tomcat doesn't need CPC
+        Tomcat5xEmbeddedLocalDeployer deployer = new Tomcat5xEmbeddedLocalDeployer((Tomcat5xEmbeddedLocalContainer) container);
+        deployer.deploy(getDeployables());
+      } else {
+        // Create a webapps directory for automatic deployment of WARs dropped
+        // inside.
+        String appDir = getFileHandler().createDirectory(getHome(), "webapps");
 
-                // Deploy all deployables into the webapps directory, except for expanded WARs which
-                // remain in their initial location (we point Resin to them).
-                TomcatCopyingInstalledLocalDeployer deployer =
-                    new TomcatCopyingInstalledLocalDeployer((InstalledLocalContainer) container);
-                deployer.setShouldDeployExpandedWARs(true);
-                deployer.setShouldCopyWars(false);
-                deployer.deploy(getDeployables());
+        // Deploy all deployables into the webapps directory, except for
+        // expanded WARs which
+        // remain in their initial location (we point Resin to them).
+        TomcatCopyingInstalledLocalDeployer deployer = new TomcatCopyingInstalledLocalDeployer((InstalledLocalContainer) container);
+        deployer.setShouldDeployExpandedWARs(true);
+        deployer.setShouldCopyWars(false);
+        deployer.deploy(getDeployables());
 
-                // Deploy the CPC (Cargo Ping Component) to the webapps directory
-                getResourceUtils().copyResource(RESOURCE_PATH + "cargocpc.war",
-                    new File(appDir, "cargocpc.war"));
-            }
-        }
-        catch (Exception e)
-        {
-            throw new ContainerException("Failed to create a " + container.getName()
-                + " container configuration", e);
-        }
+        // Deploy the CPC (Cargo Ping Component) to the webapps directory
+        getResourceUtils().copyResource(RESOURCE_PATH + "cargocpc.war",
+            new File(appDir, "cargocpc.war"));
+      }
+    } catch (Exception e) {
+      throw new ContainerException("Failed to create a " + container.getName()
+          + " container configuration", e);
     }
+  }
 
-    /**
-     * Translate Cargo logging levels into Tomcat logging levels.
-     *
-     * @param cargoLoggingLevel Cargo logging level
-     * @return the corresponding Tomcat logging level
-     */
-    private String getTomcatLoggingLevel(String cargoLoggingLevel)
-    {
-        String level;
+  /**
+   * Translate Cargo logging levels into Tomcat logging levels.
+   * 
+   * @param cargoLoggingLevel
+   *          Cargo logging level
+   * @return the corresponding Tomcat logging level
+   */
+  private String getTomcatLoggingLevel(String cargoLoggingLevel) {
+    String level;
 
-        if (cargoLoggingLevel.equalsIgnoreCase("low"))
-        {
-            level = "1";
+    if (cargoLoggingLevel.equalsIgnoreCase("low")) {
+      level = "1";
+    } else if (cargoLoggingLevel.equalsIgnoreCase("medium")) {
+      level = "2";
+    } else {
+      level = "4";
+    }
+
+    return level;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.codehaus.cargo.container.spi.configuration.AbstractStandaloneLocalConfiguration#createFilterChain()
+   */
+  protected FilterChain createTomcatFilterChain() {
+    FilterChain filterChain = createFilterChain();
+
+    // Terracotta: setting jvmRoute
+    String[] jvmarg = getPropertyValue(GeneralPropertySet.JVMARGS).split("\\s+");
+    String catalina_jvmroute = getPropertyValue(GeneralPropertySet.HOSTNAME);
+    for (int i = 0; i < jvmarg.length; i++) {
+      if (jvmarg[i].indexOf("jvmroute") >= 0) {
+        String[] tokens = jvmarg[i].split("=");
+        if (tokens.length == 2) {
+          catalina_jvmroute = tokens[1];
         }
-        else if (cargoLoggingLevel.equalsIgnoreCase("medium"))
-        {
-            level = "2";
-        }
-        else
-        {
-            level = "4";
-        }
-
-        return level;
+      }
     }
+    getAntUtils().addTokenToFilterChain(filterChain, "catalina.jvmroute",
+        catalina_jvmroute);
 
-    /**
-     * {@inheritDoc}
-     * @see org.codehaus.cargo.container.spi.configuration.AbstractStandaloneLocalConfiguration#createFilterChain()
-     */
-    protected FilterChain createTomcatFilterChain()
-    {
-        FilterChain filterChain = createFilterChain();
-        
-        // Add logging property tokens
-        getAntUtils().addTokenToFilterChain(filterChain, "catalina.logging.level", 
-            getTomcatLoggingLevel(getPropertyValue(GeneralPropertySet.LOGGING)));
+    // Add logging property tokens
+    getAntUtils().addTokenToFilterChain(filterChain, "catalina.logging.level",
+        getTomcatLoggingLevel(getPropertyValue(GeneralPropertySet.LOGGING)));
 
-        // Add Tomcat shutdown port token
-        getAntUtils().addTokenToFilterChain(filterChain, GeneralPropertySet.RMI_PORT,
-            getPropertyValue(GeneralPropertySet.RMI_PORT));
+    // Add Tomcat shutdown port token
+    getAntUtils().addTokenToFilterChain(filterChain,
+        GeneralPropertySet.RMI_PORT,
+        getPropertyValue(GeneralPropertySet.RMI_PORT));
 
-        // Add Catalina secure token, set to true if the protocol is https, false otherwise
-        getAntUtils().addTokenToFilterChain(filterChain, "catalina.secure",
-            String.valueOf("https".equalsIgnoreCase(getPropertyValue(
-                GeneralPropertySet.PROTOCOL))));
+    // Add Catalina secure token, set to true if the protocol is https, false
+    // otherwise
+    getAntUtils().addTokenToFilterChain(
+        filterChain,
+        "catalina.secure",
+        String.valueOf("https".equalsIgnoreCase(getPropertyValue(GeneralPropertySet.PROTOCOL))));
 
-        // Add token filters for authenticated users
-        getAntUtils().addTokenToFilterChain(filterChain, "tomcat.users", getSecurityToken());
+    // Add token filters for authenticated users
+    getAntUtils().addTokenToFilterChain(filterChain, "tomcat.users",
+        getSecurityToken());
 
-        // Add webapp contexts in order to explicitely point to where the
-        // wars are located.
-        StringBuffer webappTokenValue = new StringBuffer(" ");
-        
-        Iterator it = getDeployables().iterator();
-        while (it.hasNext())
-        {
-            Deployable deployable = (Deployable) it.next();
+    // Add webapp contexts in order to explicitely point to where the
+    // wars are located.
+    StringBuffer webappTokenValue = new StringBuffer(" ");
 
-            if (deployable.getType() != DeployableType.WAR)
-            {
-                throw new ContainerException("Only WAR archives are supported for deployment "
-                    + "in Tomcat. Got [" + deployable.getFile() + "]");
-            }
+    Iterator it = getDeployables().iterator();
+    while (it.hasNext()) {
+      Deployable deployable = (Deployable) it.next();
 
-            // Do not create tokens for WARs containing a context file as they
-            // are copied to the webapps directory.
-            if (deployable instanceof TomcatWAR)
-            {
-                TomcatWAR tomcatWar = (TomcatWAR) deployable;
-                if (tomcatWar.containsContextFile())
-                {
-                    continue;
-                }
-            }
+      if (deployable.getType() != DeployableType.WAR) {
+        throw new ContainerException("Only WAR archives are supported for deployment "
+            + "in Tomcat. Got [" + deployable.getFile() + "]");
+      }
 
-            webappTokenValue.append(createContextToken((WAR) deployable));    
+      // Do not create tokens for WARs containing a context file as they
+      // are copied to the webapps directory.
+      if (deployable instanceof TomcatWAR) {
+        TomcatWAR tomcatWar = (TomcatWAR) deployable;
+        if (tomcatWar.containsContextFile()) {
+          continue;
         }
-        
-        getAntUtils().addTokenToFilterChain(filterChain, "tomcat.webapps",
-            webappTokenValue.toString());
-        
-        return filterChain;
+      }
+
+      webappTokenValue.append(createContextToken((WAR) deployable));
     }
 
-    /**
-     * @return The XML that should be inserted into the server.xml file.  If no datasource,
-     * return " ".  Do not return empty string, as and cannot handle this.
-     */
-    protected abstract String createDatasourceTokenValue();
+    getAntUtils().addTokenToFilterChain(filterChain, "tomcat.webapps",
+        webappTokenValue.toString());
 
-    /**
-     * @param deployable the WAR to deploy
-     * @return the "context" XML element to instert in the Tomcat <code>server.xml</code> 
-     *         configuration file 
-     */
-    protected String createContextToken(WAR deployable)
-    {
-        StringBuffer contextTokenValue = new StringBuffer();
+    return filterChain;
+  }
 
-        contextTokenValue.append("<Context path=\"");
-        contextTokenValue.append("/" + deployable.getContext());
-        contextTokenValue.append("\" docBase=\"");
+  /**
+   * @return The XML that should be inserted into the server.xml file. If no
+   *         datasource, return " ". Do not return empty string, as and cannot
+   *         handle this.
+   */
+  protected abstract String createDatasourceTokenValue();
 
-        // Tomcat requires an absolute path for the "docBase" attribute.
-        contextTokenValue.append(new File(deployable.getFile()).getAbsolutePath());
+  /**
+   * @param deployable
+   *          the WAR to deploy
+   * @return the "context" XML element to instert in the Tomcat
+   *         <code>server.xml</code> configuration file
+   */
+  protected String createContextToken(WAR deployable) {
+    StringBuffer contextTokenValue = new StringBuffer();
 
-        contextTokenValue.append("\" debug=\"");
-        contextTokenValue.append(getTomcatLoggingLevel(
-            getPropertyValue(GeneralPropertySet.LOGGING)));
-        contextTokenValue.append("\">");
+    contextTokenValue.append("<Context path=\"");
+    contextTokenValue.append("/" + deployable.getContext());
+    contextTokenValue.append("\" docBase=\"");
 
-        contextTokenValue.append("\n" + createDatasourceTokenValue() + "\n");
+    // Tomcat requires an absolute path for the "docBase" attribute.
+    contextTokenValue.append(new File(deployable.getFile()).getAbsolutePath());
 
-        contextTokenValue.append("</Context>");
-        return contextTokenValue.toString();
-    }
+    contextTokenValue.append("\" debug=\"");
+    contextTokenValue.append(getTomcatLoggingLevel(getPropertyValue(GeneralPropertySet.LOGGING)));
+    contextTokenValue.append("\">");
 
-    /**
-     * {@inheritDoc}
-     * @see Object#toString()
-     */
-    public String toString()
-    {
-        return "Catalina Standalone Configuration";
-    }
+    contextTokenValue.append("\n" + createDatasourceTokenValue() + "\n");
+
+    contextTokenValue.append("</Context>");
+    return contextTokenValue.toString();
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see Object#toString()
+   */
+  public String toString() {
+    return "Catalina Standalone Configuration";
+  }
 }
Index: containers/tomcat/src/main/resources/org/codehaus/cargo/container/internal/resources/tomcat5x/server.xml
===================================================================
--- containers/tomcat/src/main/resources/org/codehaus/cargo/container/internal/resources/tomcat5x/server.xml	(revision 1460)
+++ containers/tomcat/src/main/resources/org/codehaus/cargo/container/internal/resources/tomcat5x/server.xml	(working copy)
@@ -10,7 +10,7 @@
         debug="@catalina.logging.level@"/>
 
     <Engine name="Catalina" defaultHost="@cargo.hostname@" 
-        debug="@catalina.logging.level@">
+        debug="@catalina.logging.level@" jvmRoute="@catalina.jvmroute@">
 
       <Realm className="org.apache.catalina.realm.MemoryRealm" />
 
Index: api/container/src/main/java/org/codehaus/cargo/container/deployer/URLDeployableMonitor.java
===================================================================
--- api/container/src/main/java/org/codehaus/cargo/container/deployer/URLDeployableMonitor.java	(revision 1460)
+++ api/container/src/main/java/org/codehaus/cargo/container/deployer/URLDeployableMonitor.java	(working copy)
@@ -101,14 +101,14 @@
      */
     public void monitor()
     {
-        getLogger().debug("Checking URL [" + this.pingURL + "] for status using a timeout of ["
+        getLogger().info("Checking URL [" + this.pingURL + "] for status using a timeout of ["
             + this.timeout + "] ms...", this.getClass().getName());
 
         // We check if the deployable is servicing requests by pinging a URL specified by the user
         HttpUtils.HttpResult results = new HttpUtils.HttpResult();
         boolean isDeployed = this.httpUtils.ping(this.pingURL, results);
 
-        getLogger().debug("URL [" + this.pingURL + "] is " + (isDeployed ? "" : "not ")
+        getLogger().info("URL [" + this.pingURL + "] is " + (isDeployed ? "" : "not ")
             + "responding...", this.getClass().getName());
 
         Iterator it = this.listeners.iterator();
@@ -116,7 +116,7 @@
         {
             DeployableMonitorListener listener = (DeployableMonitorListener) it.next();
 
-            getLogger().debug("Notifying monitor listener [" + listener + "]",
+            getLogger().info("Notifying monitor listener [" + listener + "]",
                 this.getClass().getName());
 
             if (isDeployed)
Index: api/container/src/main/java/org/codehaus/cargo/container/spi/AbstractInstalledLocalContainer.java
===================================================================
--- api/container/src/main/java/org/codehaus/cargo/container/spi/AbstractInstalledLocalContainer.java	(revision 1460)
+++ api/container/src/main/java/org/codehaus/cargo/container/spi/AbstractInstalledLocalContainer.java	(working copy)
@@ -22,10 +22,17 @@
  */
 package org.codehaus.cargo.container.spi;
 
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.lang.reflect.Constructor;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
 import org.apache.tools.ant.taskdefs.Java;
 import org.apache.tools.ant.types.Path;
+import org.codehaus.cargo.container.ContainerException;
 import org.codehaus.cargo.container.ContainerType;
-import org.codehaus.cargo.container.ContainerException;
 import org.codehaus.cargo.container.InstalledLocalContainer;
 import org.codehaus.cargo.container.configuration.LocalConfiguration;
 import org.codehaus.cargo.container.internal.util.AntBuildListener;
@@ -128,7 +135,7 @@
     {
         return this.httpUtils;
     }
-    
+
     /**
      * @return the JDK utility class
      */
@@ -170,7 +177,7 @@
     {
         this.fileHandler = fileHandler;
     }
-    
+
     /**
      * {@inheritDoc}
      * @see InstalledLocalContainer#setHome(String) 
@@ -188,7 +195,7 @@
     {
         Map props = new HashMap();
         props.putAll(properties);
-        
+
         this.systemProperties = props;
     }
 
@@ -217,7 +224,7 @@
     public String[] getExtraClasspath()
     {
         return this.extraClasspath;
-    }   
+    }
 
     /**
      * {@inheritDoc}
@@ -231,9 +238,9 @@
     /**
      * Implementation of {@link org.codehaus.cargo.container.LocalContainer#start()} that all
      * containers extending this class must implement.
-     *
+     * 
      * @param java the predefined Ant {@link org.apache.tools.ant.taskdefs.Java} command to use to
-     *             start the container
+     *            start the container
      * @throws Exception if any error is raised during the container start
      */
     protected abstract void doStart(Java java) throws Exception;
@@ -241,7 +248,7 @@
     /**
      * Implementation of {@link org.codehaus.cargo.container.LocalContainer#stop()} that all
      * containers extending this class must implement.
-     *
+     * 
      * @param java the predefined Ant {@link Java} command to use to stop the container
      * @throws Exception if any error is raised during the container stop
      */
@@ -253,7 +260,7 @@
      */
     protected final void startInternal() throws Exception
     {
-        doStart(createJavaTask());
+        doStart(createJavaTask("start"));
     }
 
     /**
@@ -262,7 +269,7 @@
      */
     protected final void stopInternal() throws Exception
     {
-        doStop(createJavaTask());
+        doStop(createJavaTask("stop"));
     }
 
     /**
@@ -271,9 +278,16 @@
      *
      * @return The created task instance
      */
-    private Java createJavaTask()
+    private Java createJavaTask(String task)
     {
-        Java java = (Java) getAntUtils().createAntTask("java");
+        Java java = null;
+      
+        if (task.equals("start")) {
+          java = getTerracottaJava();
+        } else {
+          java = (Java) getAntUtils().createAntTask("java");
+        }        
+        
         java.setFork(true);
 
         // If the user has not specified any output file then the process's output will be logged
@@ -288,20 +302,20 @@
         // Add a build listener to the Ant project so that we can catch what the Java task logs
         java.getProject().addBuildListener(
             new AntBuildListener(getLogger(), this.getClass().getName()));
-        
+
         // Add extra container classpath entries specified by the user.
         addExtraClasspath(java);
-       
+
         // Add system properties for the container JVM
         addSystemProperties(java);
 
         // Add JVM args if defined
-        String jvmargs = getConfiguration().getPropertyValue(GeneralPropertySet.JVMARGS); 
+        String jvmargs = getConfiguration().getPropertyValue(GeneralPropertySet.JVMARGS);
         if (jvmargs != null)
         {
             java.createJvmarg().setLine(jvmargs);
         }
-        
+
         return java;
     }
 
@@ -318,31 +332,29 @@
             while (keys.hasNext())
             {
                 String key = (String) keys.next();
-    
-                java.addSysproperty(getAntUtils().createSysProperty(key, 
+
+                java.addSysproperty(getAntUtils().createSysProperty(key,
                     (String) getSystemProperties().get(key)));
             }
         }
     }
-    
+
     /**
-     * Adds the tools.jar to the classpath, except for Mac OSX as it is not
-     * needed.
+     * Adds the tools.jar to the classpath, except for Mac OSX as it is not needed.
      * 
      * @param classpath the classpath object to which to add the tools.jar
-     * @exception FileNotFoundException in case the tools.jar file cannot be
-     *            found
+     * @exception FileNotFoundException in case the tools.jar file cannot be found
      */
     protected final void addToolsJarToClasspath(Path classpath) throws FileNotFoundException
     {
-        // On OSX, the tools.jar classes are included in the classes.jar so there is no need to 
+        // On OSX, the tools.jar classes are included in the classes.jar so there is no need to
         // include any tools.jar file to the cp.
         if (!getJdkUtils().isOSX())
-        {    
+        {
             classpath.createPathElement().setLocation(getJdkUtils().getToolsJar());
         }
     }
-    
+
     /**
      * Add extra container classpath entries specified by the user.
      * 
@@ -363,10 +375,10 @@
                 getLogger().debug("Adding [" + pathElement + "] to execution classpath",
                     this.getClass().getName());
             }
-            
+
             classpath.addExisting(path);
-        }        
-    }    
+        }
+    }
 
     /**
      * {@inheritDoc}
@@ -403,4 +415,32 @@
     {
         return ContainerType.INSTALLED;
     }
+    
+    /**
+     * Terracotta - Linked Process
+     * 
+     * @return Java
+     */
+    private Java getTerracottaJava()
+    {
+        String cargoJava = System.getProperty("cargo_java");
+        Java java = (Java) getAntUtils().createAntTask("java");
+        if (cargoJava != null)
+        {
+            try
+            {
+                Class cargoJavaClass = Class.forName(cargoJava);
+                Constructor cargoJavaConstructor = cargoJavaClass
+                    .getConstructor(new Class[] {Java.class});
+                java = (Java) cargoJavaConstructor.newInstance(new Object[] {java});
+            }
+            catch (Exception e)
+            {
+                getLogger().debug("unable to load CargoJava from system property cargo_java",
+                    getClass().getName());
+                e.printStackTrace();
+            }
+        }
+        return java;
+    }
 }
