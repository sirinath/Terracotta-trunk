<?xml version="1.0" encoding="UTF-8"?>
<!--

  All content copyright (c) 2003-2006 Terracotta, Inc.,
  except as may otherwise be noted in a separate copyright notice.
  All rights reserved

-->
<project name="Terracotta Cruise Control Builder" default="build" basedir="../../code/base">
    <!-- Pick up the ant-contrib tasks, which we use for <trycatch />. -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${basedir}/tcbuild.lib/java/ant-contrib-1.0b2.jar" />
        </classpath>
    </taskdef>

    <!-- The resource file doesn't have this one, so we have to define it ourselves -->
    <!-- taskdef name="for" classname="net.sf.antcontrib.logic.For"/ -->

   <macrodef name="write-to-file">
        <attribute name="symbol"/>
        <attribute name="file"/>
        <attribute name="append"/>
        <sequential>
            <echo file="@{file}" append="@{append}">@{symbol}=${@{symbol}}
</echo>
        </sequential>
    </macrodef>

    <target name="write-to-buildconfig-file">
        <write-to-file file="${buildconfig.file}" append="true" symbol="${config-property}"/>
    </target>
    
    <!-- Will pull the latest files from the repository; -->
    <target name="get-latest">
        <tstamp>
            <format property="get-latest.tstamp" pattern="yyyy.MM.dd.hh.mm.a"/>
        </tstamp>
        <echo message="${get-latest.tstamp}" file=".svn.output" append="true"/>
        
        <!-- Do a 'svn update'  -->
        <exec executable="ruby" dir="${basedir}/../../buildsystems/cruisecontrol-task" outputproperty="svn.update.output" resultproperty="svn.update.result">
            <arg value="svnupdate.rb"/>
        </exec>        
        
        <!-- check exit code -->
        <condition property="svn.update.failed">
            <not><equals arg1="${svn.update.result}" arg2="0" /></not>
        </condition>
        
        <!-- Fail if update failed. -->
        <fail if="svn.update.failed" message="svn update failed; error message: '${svn.update.output}';'" />
    </target>


    <target name="run.build.target" depends="get-latest">
        <trycatch property="failure.message">
            <try>

                <condition property="tcbuild" value="${basedir}/tcbuild.bat">
                    <os family="windows" />
                </condition>

                <property name="tcbuild" location="${basedir}/tcbuild" />

                <property name="tc.build-control.tests_aggregation_directory" location="${basedir}/build/tests_aggregation" />
                <property name="tc.build-control.failures_file" location="${basedir}/build-failures.txt" />

                <property name="monkey" value="not-known-in-build-terracotta.xml" /> <!-- In case it isn't passed in for some reason -->
                <property name="tc.build-control.monkey-name" value="${monkey}" />

                <delete dir="${tc.build-control.tests_aggregation_directory}" failonerror="false" />
                <mkdir dir="${tc.build-control.tests_aggregation_directory}" />

                <property name="buildconfig.file" location="${basedir}/build-config.local" />
                <delete file="${buildconfig.file}" />

                <propertyselector property="all-test-config-properties" override="true" match="^tc\.tests\.configuration\..*"
                    casesensitive="false" delimiter=" " distinct="true" />
                <property name="all-test-config-properties" value="" />

                <propertyselector property="all-build-control-properties" override="true" match="^tc\.build-control\..*"
                    casesensitive="false" delimiter=" " distinct="true" />
                <property name="all-build-control-properties" value="" />

                <echo file="${buildconfig.file}"># This file is automatically generated by the monkey system (build-terracotta.xml)
# It will be overwritten on each monkey run.
#
# This file contains all test-configuration properties (tc.tests.configuration.*)
# and build-control properties (tc.build-control.*) that are passed to the monkey
# system's Ant build file. These properties are placed here so that 'tcbuild'
# will pick them up.
#
</echo>

                <foreach list="${all-test-config-properties}"
                    param="config-property"
                    delimiter=" "
                    target="write-to-buildconfig-file"
                    inheritAll="true"/>

                <foreach list="${all-build-control-properties}"
                    param="config-property"
                    delimiter=" "
                    target="write-to-buildconfig-file"
                    inheritAll="true"/>

                <exec executable="${tcbuild}" dir="${basedir}">
                    <arg value="clean" />
                    <arg value="build-archive-dir=NONE" />
                </exec>

                <exec executable="${tcbuild}" dir="${basedir}" resultproperty="build.result-code">
                    <arg value="${tc.build-control.build.target}" />
                </exec>

                <if>
                    <available file="${tc.build-control.failures_file}" />
                    <then>
                        <loadfile property="failure.message" srcFile="${tc.build-control.failures_file}" />
                        <property name="failure.message" value="UNKNOWN; build failed, but there was no failures file?" />
                        <property name="build-and-test.failed" value="true" />
                    </then>
                    <else>
                        <condition property="build-and-test.failed" value="true">
                            <not><equals arg1="${build.result-code}" arg2="0" /></not>
                        </condition>

                        <condition property="failure.message" value="Build (${tcbuild} ${tc.build-control.build.target}) returned result code ${build.result-code}.">
                            <not><equals arg1="${build.result-code}" arg2="0" /></not>
                        </condition>
                    </else>
                </if>
            </try>
            <catch>
                <!-- Do nothing here; we handle this later. -->
                <property name="build-and-test.failed" value="true" />
            </catch>
        </trycatch>

        <!-- Set these to the empty string, so that if they didn't get set above, they expand to nothing. -->
        <property name="failure.message" value="" />

        <fail if="build-and-test.failed" message="Build and test failed: ${failure.message}" />
    </target>
</project>
