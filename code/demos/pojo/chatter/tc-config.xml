<?xml version="1.0" encoding="UTF-8"?>
<!--

  All content copyright (c) 2003-2008 Terracotta, Inc.,
  except as may otherwise be noted in a separate copyright notice.
  All rights reserved.

-->
<tc:tc-config xmlns:tc="http://www.terracotta.org/config"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.terracotta.org/schema/terracotta-4.xsd">
  <!--Server is colocated with client and DSO is listening on
       default port (9510).-->
  <servers>
    <server host="%i" name="sample"/>
    <update-check>
      <enabled>true</enabled>
    </update-check>
  </servers>
  <!--Configure DSO for 'development' mode;
       See the Terracotta DSO Guide for additional information.-->
  <system>
    <configuration-model>development</configuration-model>
  </system>
  <!--Tell DSO where to put the generated client logs
       See the Terracotta Configuration Guide and Reference for additional
       information.-->
  <clients>
    <logs>terracotta/client-logs/pojo/chatter/%D</logs>
    <statistics>terracotta/client-statistics/pojo/chatter/%D</statistics>
  </clients>
  <application>
    <dso>
      <!--Our app requires these custom objects/classes to be shared - the following declarations
           tells DSO which ones they are. When the app runs under DSO, instances of these classes
           will broadcast changes in their state.

           A good idiom when writing an app that you intend to cluster via TC DSO, is to group the
           classes you wish to share under a single package (although if you follow the MVC pattern
           this tends to happen naturally) - this way the list of classes you wish to instrument
           can be concise-->
      <instrumented-classes>
        <!--Here we are saying that the class 'demo.chatter.ChatManager' is to be shared, but
             that fields described in the class as 'transient' should still behave as transient fields.

             When we tell DSO to honor transients (by setting the value of the  'honor-transient'
             field to 'true'), fields declared as transient *are* transient - its state and value
             will not become available across instances of the app. Only local instances of the app
             will be able to create, read, and write (to) these fields.

             In the 'demo.chatter.ChatManager' we happen to initialize most of its members
             (transient and otherwise) upon creation. However, when DSO finds that an object is already
             available from the server, additional instances of the app will simply receive a reference
             to that object, and its constructor will not be called - transient fields will not be
             initialized at this point, so we use the 'on-load' declaration to indicate actions
             that the class need to take when DSO loads that object from the server (actions that normally
             happens on class instantiation)-->
        <include>
          <class-expression>demo.chatter.ChatManager</class-expression>
          <honor-transient>true</honor-transient>
          <on-load>
            <method>init</method>
          </on-load>
        </include>
        <!--Here, we're essentially saying, treat the following classes: 'demo.chatter.Message',
            'demo.chatter.User' as shareable; we use these objects to ferry around the messages
            (and information about the message) sent from chatter clients.-->
        <include>
          <class-expression>demo.chatter.Message</class-expression>
        </include>
        <include>
          <class-expression>demo.chatter.User</class-expression>
          <honor-transient>true</honor-transient>
        </include>
      </instrumented-classes>
      <!--This section makes it so that calls made to this method from any instance of the app
           also happens across all instances of the app at the time of the call-->
      <distributed-methods>
        <method-expression>void demo.chatter.ChatManager.sendNewMessageEvent(..)</method-expression>
        <method-expression>void demo.chatter.ChatManager.sendNewUserEvent(..)</method-expression>
      </distributed-methods>
      <!--We declare the field 'demo.chatter.Main.message' a root, making it
           available for all instances of our app that runs via DSO-->
      <roots>
        <root>
          <field-name>demo.chatter.Main.chatManager</field-name>
        </root>
      </roots>
      <!-- This section applies autolocking to all methods in the ChatManager class. Autolocking will
           make any syncrhonization in these methods apply accross the cluster -->
      <locks>
        <autolock>
          <method-expression>* demo.chatter.ChatManager.*(..)</method-expression>
        </autolock>
      </locks>
    </dso>
  </application>
</tc:tc-config>
