<?xml version="1.0" encoding="UTF-8"?>
<!--

  All content copyright (c) 2003-2008 Terracotta, Inc.,
  except as may otherwise be noted in a separate copyright notice.
  All rights reserved.

-->
<tc:tc-config xmlns:tc="http://www.terracotta.org/config"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.terracotta.org/schema/terracotta-4.xsd">
  <!-- Server is colocated with client and DSO is listening on
       default port (9510). -->
  <servers>
    <server host="%i" name="sample"/>
    <update-check>
      <enabled>true</enabled>
    </update-check>
  </servers>

  <!-- Tell DSO where to put the generated client logs.
       See the Terracotta Configuration Guide and Reference for additional
       information. -->
  <clients>
    <logs>terracotta/client-logs/pojo/coordination/%D</logs>
    <statistics>terracotta/client-statistics/pojo/coordination/%D</statistics>
  </clients>

  <application>
    <dso>
      <!-- Our app requires these custom objects/classes to be shared - the following declarations
           tells DSO which ones they are. When the app runs under DSO, instances of these classes
           will broadcast changes in their state.

           A good idiom when writing an app that you intend to cluster via TC DSO, is to group the 
           classes you wish to share under a single package (although if you follow the MVC pattern
           this tends to happen naturally) - this way the list of classes you wish to instrument
           can be concise -->
      <instrumented-classes>
        <include>
          <class-expression>*..*</class-expression>
        </include>
      </instrumented-classes>

      <!-- These methods (originating from local objects) operates on objects declared as shared. This 
           section tells DSO to assume a lock on those objects for the duration of the call; essentially this
           section declares that all methods found for all classes found for all packages should assume the 
           behavior described -->
      <locks>
        <autolock>
          <method-expression>* *..*.*(..)</method-expression>
        </autolock>
      </locks>

      <!-- We declare the following fields a root, making it 
           available for all instances of our app that runs via DSO -->
      <roots>
        <root>
          <field-name>demo.coordination.Main.enterBarrier</field-name>
        </root>
        <root>
          <field-name>demo.coordination.Main.exitBarrier</field-name>
        </root>
      </roots>
    </dso>
  </application>
</tc:tc-config>
