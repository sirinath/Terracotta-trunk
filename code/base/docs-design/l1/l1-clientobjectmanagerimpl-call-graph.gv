digraph g {
graph [
 center = true
 fontname = "Arial"
];

node [
style=filled
fontname = "Arial"
fontsize = 8
];

edge [
];

/*-------------------------- NODES --------------------------*/

// End points
node [ color = blue fontcolor = white ];
"ClassProvider.getClassFor()" [ label = "ClassProvider.getClassFor\nString, String, ClassloaderContext)" ];
"TCObjectLogical()" [ label = "TCObjectLogical\n()" ];
"TCObjectPhysical()" [ label = "TCObjectPhysical\n()" ];

// Task entry points
node [ color = green  fontcolor = black shape = "hexagon" ];
"fieldChangedPhysical" [ label = "field changed\nphysical" ];
"broadcast" [ label = "broadcast" ];
"rootFieldAssigned" [ label = "root field assigned" ];
"fieldGetter" [ label = "instrumented getter" ];
"dmi" [ label = "DMI" ];

// External methods
node [ shape = ellipse color = pink fontcolor = black ];
"factory.getNewInstance()" [ label = "TCObjectFactoryImpl.\ngetNewInstance\n()" ];
"AddManagedObjectAction.visit()" [ label = "AddManagedObjectAction.\nvisit\n()" ];
"SharedObjectsAction.visit()" [ label = "SharedObjectsAction.\nvisit\n()" ];
"TCClass.createTCObject(ObjectID, Object, boolean)" [ label = "TCClass.\ncreateTCObject\n(ObjectID, Object, boolean)" ];
"TCClass.getNewInstanceFromNonDefaultConstructor()" [ label = "TCClass.\ngetNewInstanceFromNonDefaultConstructor\n(DNA)" ];
"ClientTransactionManagerImpl.apply()" [ label = "ClientTxManagerImpl.\napply\n()" ];
"ClientTransactionManagerImpl.basicApply()" [ label = "ClientTxManagerImpl.\nbasicApply\n()" ];
"TCObjectImpl.hydrate()" [ label = "TCObjectImpl.\nhydrate\n()" ];
"TCObjectImpl.createPeerObjectIfNecessary()" [ label = "TCObjectImpl.\ncreatePeerObjectIfNecessary\n()" ];
"TCObjectFactoryImpl.getNewPeerObject()" [ label = "TCObjectFactoryImpl.\ngetNewPeerObject()" ];
"TCClassImpl.hydrate()" [ label = "TCClassImpl.\nhydrate\n()" ];
"Applicator.hydrate()" [ label = "Applicator.\nhydrate\n()" ];
"Applicator.getNewInstance()" [ label = "Applicator.\ngetNewInstance\n()" ];
"TCObjectLogical.logicalInvoke()" [ label = "TCObjectLogical.\nlogicalInvoke\n()" ];
"ClientTransactionManagerImpl.fieldChanged()" [ label = "ClientTxManagerImpl.\nfieldChanged\n()" ];
"TCObjectPhysical.resolveReference()" [ label = "TCObjectPhysical.\nresolveReference\n()" ];
"DNA-Decoding" [ shape = rectangle label = "com.tc.object.dna.impl.*" ];
"ClassInstance.asClass(ClassProvider classProvider)" [ label = "ClassInstance.\nasClass\n(ClassProvider classProvider)" ];

// COMI Methods
node [ shape = ellipse color = lightblue2 fontcolor = black ];
// "ensureLocalLookupContextLoaded()" [ color = wheat	label = "private\nvoid ensureLocalLookupContextLoaded\n()"];
//"getClassFor(String, String)" [ color = lightblue2	label = "public\nClass getClassFor\n(String, String)"];
//"pause()" [ color = lightblue2	label = "public synchronized\nvoid pause\n()"];
//"starting()" [ color = lightblue2	label = "public synchronized\nvoid starting\n()"];
//"unpause()" [ color = lightblue2	label = "public synchronized\nvoid unpause\n()"];
//"createParentCopyInstanceIfNecessary(Map, Map, Object)" [ color = lightblue2	label = "public\nObject createParentCopyInstanceIfNecessary\n(Map, Map, Object)"];
//"waitUntilRunning()" [ color = wheat	label = "private\nvoid waitUntilRunning\n()"];
//"assertPaused(Object)" [ color = wheat	label = "private\nvoid assertPaused\n(Object)"];
//"assertStarting(Object)" [ color = wheat	label = "private\nvoid assertStarting\n(Object)"];
//"assertNotPaused(Object)" [ color = wheat	label = "private\nvoid assertNotPaused\n(Object)"];
//"getPortableObjects(Class, Object, TraversedReferences)" [ color = lightblue2	label = "public\nTraversedReferences getPortableObjects\n(Class, Object, TraversedReferences)"];
//"setTransactionManager(ClientTransactionManager)" [ color = lightblue2	label = "public\nvoid setTransactionManager\n(ClientTransactionManager)"];
//"getTransactionManager()" [ color = lightblue2	label = "public\nClientTransactionManager getTransactionManager\n()"];
//"deepCopy(Object, OptimisticTransactionManager)" [ color = lightblue2	label = "public\nObject deepCopy\n(Object, OptimisticTransactionManager)"];
//"getLocalLookupContext()" [ color = wheat	label = "private ClientObjectManagerImpl$LocalLookupContext getLocalLookupContext\n()"];
//"getObjectLatchState(ObjectID)" [ color = wheat	label = "private ClientObjectManagerImpl$ObjectLatchState getObjectLatchState\n(ObjectID)"];
//"markLookupInProgress(ObjectID)" [ color = wheat	label = "private ClientObjectManagerImpl$ObjectLatchState markLookupInProgress\n(ObjectID)"];
//"markCreateInProgress(ClientObjectManagerImpl$ObjectLatchState, TCObject, ClientObjectManagerImpl$LocalLookupContext)" [ color = wheat	label = "private synchronized\nvoid markCreateInProgress\n(ClientObjectManagerImpl$ObjectLatchState, TCObject, ClientObjectManagerImpl$LocalLookupContext)"];
//"removeCreateInProgress(ObjectID)" [ color = wheat	label = "private synchronized\nvoid removeCreateInProgress\n(ObjectID)"];
//"getObjectLatchStateMap()" [ color = wheat	label = "protected\nMap getObjectLatchStateMap\n()"];
//"cloneAndUpdate(OptimisticTransactionManager, IdentityHashMap, IdentityHashMap, Object, Object)" [ color = wheat	label = "private\nvoid cloneAndUpdate\n(OptimisticTransactionManager, IdentityHashMap, IdentityHashMap, Object, Object)"];
"create(Object, NonPortableEventContext)" [ color = wheat	label = "private\nTCObject create\n(Object, NonPortableEventContext)"];
"share(Object, NonPortableEventContext)" [ color = wheat	label = "private\nTCObject share\n(Object, NonPortableEventContext)"];
//"getReferenceQueue()" [ color = lightblue2	label = "public\nReferenceQueue getReferenceQueue\n()"];
//"shutdown()" [ color = lightblue2	label = "public\nvoid shutdown\n()"];
//"stopThread(StoppableThread)" [ color = wheat	label = "private static\nvoid stopThread\n(StoppableThread)"];
"lookupOrCreate(Object)" [ color = lightblue2	label = "public\nTCObject lookupOrCreate\n(Object)"];
"lookupOrCreate(Object, NonPortableEventContext)" [ color = wheat	label = "private\nTCObject lookupOrCreate\n(Object, NonPortableEventContext)"];
"lookupOrShare(Object)" [ color = lightblue2	label = "public\nTCObject lookupOrShare\n(Object)"];
"lookupOrShareIfNecesary(Object, NonPortableEventContext)" [ color = wheat	label = "private\nTCObject lookupOrShareIfNecesary\n(Object, NonPortableEventContext)"];
"lookupOrCreateIfNecesary(Object, NonPortableEventContext)" [ color = wheat	label = "private\nTCObject lookupOrCreateIfNecesary\n(Object, NonPortableEventContext)"];
//"executePreCreateMethod(Object)" [ color = wheat	label = "private\nvoid executePreCreateMethod\n(Object)"];
//"executePostCreateMethod(Object)" [ color = wheat	label = "private\nvoid executePostCreateMethod\n(Object)"];
//"executeMethod(Object, String, String)" [ color = wheat	label = "private\nvoid executeMethod\n(Object, String, String)"];
"lookupExistingLiteralRootOrNull(String)" [ color = wheat	label = "private\nTCObject lookupExistingLiteralRootOrNull\n(String)"];
"lookupExistingOrNull(Object)" [ color = lightblue2	label = "public\nTCObject lookupExistingOrNull\n(Object)"];
"lookupExistingObjectID(Object)" [ color = lightblue2	label = "public synchronized\nObjectID lookupExistingObjectID\n(Object)"];
//"markReferenced(TCObject)" [ color = lightblue2	label = "public\nvoid markReferenced\n(TCObject)"];
"lookupObjectNoDepth(ObjectID)" [ color = lightblue2	label = "public\nObject lookupObjectNoDepth\n(ObjectID)"];
"lookupObject(ObjectID)" [ color = lightblue2	label = "public\nObject lookupObject\n(ObjectID)"];
"lookupObject(ObjectID, ObjectID)" [ color = lightblue2	label = "public\nObject lookupObject\n(ObjectID, ObjectID)"];
"lookupObject(ObjectID, ObjectID, boolean)" [ color = wheat	label = "private\nObject lookupObject\n(ObjectID, ObjectID, boolean)"];
//"reap(ObjectID)" [ color = wheat	label = "private\nvoid reap\n(ObjectID)"];
//"isManaged(Object)" [ color = lightblue2	label = "public\nboolean isManaged\n(Object)"];
//"isCreationInProgress()" [ color = lightblue2	label = "public\nboolean isCreationInProgress\n()"];
"lookup(ObjectID)" [ color = lightblue2	label = "public\nTCObject lookup\n(ObjectID)"];
"lookup(ObjectID, ObjectID, boolean)" [ color = wheat	label = "private\nTCObject lookup\n(ObjectID, ObjectID, boolean)"];
//"waitAndClearLatchSet(Set)" [ color = wheat	label = "private\nvoid waitAndClearLatchSet\n(Set)"];
"lookupIfLocal(ObjectID)" [ color = lightblue2	label = "public synchronized\nTCObject lookupIfLocal\n(ObjectID)"];
//"getAllObjectIDsAndClear(Collection)" [ color = lightblue2	label = "public synchronized\nCollection getAllObjectIDsAndClear\n(Collection)"];
"lookupRoot(String)" [ color = lightblue2	label = "public\nObject lookupRoot\n(String)"];
"lookupOrCreateRoot(String, Object)" [ color = lightblue2	label = "public\nObject lookupOrCreateRoot\n(String, Object)"];
"createOrReplaceRoot(String, Object)" [ color = lightblue2	label = "public\nObject createOrReplaceRoot\n(String, Object)"];
"lookupOrCreateRootNoDepth(String, Object)" [ color = lightblue2	label = "public\nObject lookupOrCreateRootNoDepth\n(String, Object)"];
"lookupOrCreateRoot(String, Object, boolean)" [ color = lightblue2	label = "public\nObject lookupOrCreateRoot\n(String, Object, boolean)"];
//"isLiteralPojo(Object)" [ color = wheat	label = "private\nboolean isLiteralPojo\n(Object)"];
"lookupOrCreateRoot(String, Object, boolean, boolean)" [ color = wheat	label = "private\nObject lookupOrCreateRoot\n(String, Object, boolean, boolean)"];
//"checkPortabilityOfTraversedReference(TraversedReference, Class, NonPortableEventContext)" [ color = wheat	label = "private\nvoid checkPortabilityOfTraversedReference\n(TraversedReference, Class, NonPortableEventContext)"];
//"checkPortabilityOfRoot(Object, String, Class)" [ color = wheat	label = "private\nvoid checkPortabilityOfRoot\n(Object, String, Class)"];
//"checkPortabilityOfField(Object, String, Object)" [ color = lightblue2	label = "public\nvoid checkPortabilityOfField\n(Object, String, Object)"];
//"cloneAndInvokeLogicalOperation(Object, String, Object[])" [ color = lightblue2	label = "public\nObject cloneAndInvokeLogicalOperation\n(Object, String, Object[])"];
//"checkPortabilityOfLogicalAction(Object[], int, String, Object)" [ color = lightblue2	label = "public\nvoid checkPortabilityOfLogicalAction\n(Object[], int, String, Object)"];
//"throwNonPortableException(Object, NonPortableReason, NonPortableEventContext, String)" [ color = wheat	label = "private\nvoid throwNonPortableException\n(Object, NonPortableReason, NonPortableEventContext, String)"];
//"checkPortabilityOf(Object)" [ color = wheat	label = "private\nNonPortableReason checkPortabilityOf\n(Object)"];
//"rootLookupInProgress(String)" [ color = wheat	label = "private\nboolean rootLookupInProgress\n(String)"];
//"markRootLookupInProgress(String)" [ color = wheat	label = "private\nvoid markRootLookupInProgress\n(String)"];
//"markRootLookupNotInProgress(String)" [ color = wheat	label = "private\nvoid markRootLookupNotInProgress\n(String)"];
//"replaceRootIDIfNecessary(String, ObjectID)" [ color = lightblue2	label = "public synchronized\nvoid replaceRootIDIfNecessary\n(String, ObjectID)"];
"lookupRootOptionallyCreateOrReplace(String, Object, boolean, boolean, boolean)" [ color = wheat	label = "private\nObject lookupRootOptionallyCreateOrReplace\n(String, Object, boolean, boolean, boolean)"];
"basicLookupByID(ObjectID)" [ color = wheat	label = "private\nTCObject basicLookupByID\n(ObjectID)"];
//"basicHasLocal(ObjectID)" [ color = wheat	label = "private\nboolean basicHasLocal\n(ObjectID)"];
"basicLookup(Object)" [ color = wheat	label = "private\nTCObject basicLookup\n(Object)"];
"basicAddLocal(TCObject, boolean)" [ color = wheat	label = "private\nvoid basicAddLocal\n(TCObject, boolean)"];
"addToManagedFromRoot(Object, NonPortableEventContext)" [ color = wheat	label = "private\nvoid addToManagedFromRoot\n(Object, NonPortableEventContext)"];
//"dumpObjectHierarchy(Object, NonPortableEventContext)" [ color = wheat	label = "private\nvoid dumpObjectHierarchy\n(Object, NonPortableEventContext)"];
//"dumpObjectHierarchy0(Object, NonPortableEventContext)" [ color = wheat	label = "private void dumpObjectHierarchy0\n(Object, NonPortableEventContext)"];
//"sendApplicationEvent(Object, ApplicationEvent)" [ color = lightblue2	label = "public\nvoid sendApplicationEvent\n(Object, ApplicationEvent)"];
//"storeObjectHierarchy(Object, ApplicationEventContext)" [ color = lightblue2	label = "public\nvoid storeObjectHierarchy\n(Object, ApplicationEventContext)"];
"addToSharedFromRoot(Object, NonPortableEventContext)" [ color = wheat	label = "private\nvoid addToSharedFromRoot\n(Object, NonPortableEventContext)"];
//"getOrCreateToggleRef(ObjectID, Object)" [ color = lightblue2	label = "public\nToggleableStrongReference getOrCreateToggleRef\n(ObjectID, Object)"];
"basicCreateIfNecessary(Object)" [ color = wheat	label = "private\nTCObject basicCreateIfNecessary\n(Object)"];
//"basicCreateIfNecessary(List)" [ color = wheat	label = "private synchronized\nList basicCreateIfNecessary\n(List)"];
"basicShareObjectIfNecessary(Object)" [ color = wheat	label = "private\nTCObject basicShareObjectIfNecessary\n(Object)"];
//"basicShareObjectsIfNecessary(List)" [ color = wheat	label = "private synchronized\nList basicShareObjectsIfNecessary\n(List)"];
//"addPendingCreateObjectsToTransaction()" [ color = lightblue2	label = "public synchronized\nvoid addPendingCreateObjectsToTransaction\n()"];
//"hasPendingCreateObjects()" [ color = lightblue2	label = "public synchronized\nboolean hasPendingCreateObjects\n()"];
//"nextObjectID()" [ color = wheat	label = "private\nObjectID nextObjectID\n()"];
"createNewPeer(TCClass, DNA)" [ color = lightblue2	label = "public\nWeakReference createNewPeer\n(TCClass, DNA)"];
//"createNewCopyInstance(Object, Object)" [ color = lightblue2	label = "public\nObject createNewCopyInstance\n(Object, Object)"];
//"createNewPeer(TCClass, int, ObjectID, ObjectID)" [ color = lightblue2	label = "public\nWeakReference createNewPeer\n(TCClass, int, ObjectID, ObjectID)"];
//"getOrCreateClass(Class)" [ color = lightblue2	label = "public\nTCClass getOrCreateClass\n(Class)"];
//"isPortableClass(Class)" [ color = lightblue2	label = "public\nboolean isPortableClass\n(Class)"];
//"isPortableInstance(Object)" [ color = lightblue2	label = "public\nboolean isPortableInstance\n(Object)"];

/*-------------------------- ARCS --------------------------*/
// Top-level calls
"rootFieldAssigned" -> "createOrReplaceRoot(String, Object)" [ color = green style = "dashed" label = "I guess" ]
"fieldChangedPhysical" -> "ClientTransactionManagerImpl.fieldChanged()"
"broadcast" -> "ClientTransactionManagerImpl.apply()"
"fieldGetter" -> "TCObjectPhysical.resolveReference()"

// Calls
"dmi" -> "ClassProvider.getClassFor()"
"TCObjectPhysical.resolveReference()" -> "lookup(ObjectID)"
"ClientTransactionManagerImpl.apply()" -> "ClientTransactionManagerImpl.basicApply()"
"ClientTransactionManagerImpl.basicApply()" -> "TCObjectImpl.hydrate()"
"ClientTransactionManagerImpl.basicApply()" -> "lookup(ObjectID)"
"TCObjectImpl.hydrate()" -> "TCClassImpl.hydrate()"
"TCObjectImpl.hydrate()" -> "TCObjectImpl.createPeerObjectIfNecessary()"
"TCObjectImpl.createPeerObjectIfNecessary()" -> "createNewPeer(TCClass, DNA)"
"createNewPeer(TCClass, DNA)" -> "TCObjectFactoryImpl.getNewPeerObject()"
"TCObjectFactoryImpl.getNewPeerObject()" -> "TCClass.getNewInstanceFromNonDefaultConstructor()"
"TCClass.getNewInstanceFromNonDefaultConstructor()" -> "Applicator.getNewInstance()"
"Applicator.getNewInstance()" -> "lookupObject(ObjectID)"
"TCClassImpl.hydrate()" -> "Applicator.hydrate()" [ color = red ]
"Applicator.hydrate()" -> "lookup(ObjectID)"
"Applicator.hydrate()" -> "DNA-Decoding"
"DNA-Decoding"-> "ClassInstance.asClass(ClassProvider classProvider)"
"ClassInstance.asClass(ClassProvider classProvider)" -> "ClassProvider.getClassFor()"
"TCObjectLogical.logicalInvoke()" -> "lookupOrCreate(Object)"
"ClientTransactionManagerImpl.fieldChanged()" -> "lookupOrCreate(Object)"
"create(Object, NonPortableEventContext)" -> "addToManagedFromRoot(Object, NonPortableEventContext)"
"create(Object, NonPortableEventContext)" -> "basicLookup(Object)"
"share(Object, NonPortableEventContext)" ->"addToSharedFromRoot(Object, NonPortableEventContext)"
"share(Object, NonPortableEventContext)" -> "basicLookup(Object)"
"lookupOrCreate(Object)" -> "lookupOrCreateIfNecesary(Object, NonPortableEventContext)"
"lookupOrCreate(Object, NonPortableEventContext)" -> "lookupOrCreateIfNecesary(Object, NonPortableEventContext)"
"lookupOrShare(Object)" -> "lookupOrShareIfNecesary(Object, NonPortableEventContext)"
"lookupOrShareIfNecesary(Object, NonPortableEventContext)" -> "share(Object, NonPortableEventContext)"
"lookupOrShareIfNecesary(Object, NonPortableEventContext)" -> "basicLookup(Object)"
"lookupOrCreateIfNecesary(Object, NonPortableEventContext)" -> "create(Object, NonPortableEventContext)"
"lookupOrCreateIfNecesary(Object, NonPortableEventContext)" -> "basicLookup(Object)"
"lookupExistingLiteralRootOrNull(String)" -> "basicLookupByID(ObjectID)"
"lookupExistingOrNull(Object)" -> "basicLookup(Object)"
"lookupExistingObjectID(Object)" -> "basicLookup(Object)"
"lookupObjectNoDepth(ObjectID)" -> "lookupObject(ObjectID, ObjectID, boolean)"
"lookupObject(ObjectID)" -> "lookupObject(ObjectID, ObjectID, boolean)"
"lookupObject(ObjectID, ObjectID)" -> "lookupObject(ObjectID, ObjectID, boolean)"
"lookupObject(ObjectID, ObjectID, boolean)" -> "lookup(ObjectID, ObjectID, boolean)" [ color = "red" ]
"lookupObject(ObjectID, ObjectID, boolean)" -> "basicLookupByID(ObjectID)"
"lookup(ObjectID)" -> "lookup(ObjectID, ObjectID, boolean)"
"lookup(ObjectID, ObjectID, boolean)" -> "basicAddLocal(TCObject, boolean)"
"lookup(ObjectID, ObjectID, boolean)" -> "ClassProvider.getClassFor()"
"lookup(ObjectID, ObjectID, boolean)" -> "factory.getNewInstance()"
"lookup(ObjectID, ObjectID, boolean)" -> "TCObjectImpl.hydrate()"
"lookupIfLocal(ObjectID)" -> "basicLookupByID(ObjectID)"
"lookupRoot(String)" -> "lookupRootOptionallyCreateOrReplace(String, Object, boolean, boolean, boolean)"
"lookupOrCreateRoot(String, Object)" -> "lookupOrCreateRoot(String, Object, boolean, boolean)"
"createOrReplaceRoot(String, Object)" -> "lookupRoot(String)"
"createOrReplaceRoot(String, Object)" -> "lookupOrCreateRoot(String, Object, boolean)"
"createOrReplaceRoot(String, Object)" -> "lookupExistingLiteralRootOrNull(String)"
"lookupOrCreateRootNoDepth(String, Object)" -> "lookupOrCreateRoot(String, Object, boolean, boolean)"
"lookupOrCreateRoot(String, Object, boolean)" -> "lookupOrCreateRoot(String, Object, boolean, boolean)"
"lookupOrCreateRoot(String, Object, boolean, boolean)" -> "lookupRootOptionallyCreateOrReplace(String, Object, boolean, boolean, boolean)"
"lookupRootOptionallyCreateOrReplace(String, Object, boolean, boolean, boolean)" -> "lookupObject(ObjectID, ObjectID)"
"lookupRootOptionallyCreateOrReplace(String, Object, boolean, boolean, boolean)" -> "lookupOrCreate(Object, NonPortableEventContext)""lookupOrCreate(Object, NonPortableEventContext)"
"lookupRootOptionallyCreateOrReplace(String, Object, boolean, boolean, boolean)" -> "basicCreateIfNecessary(Object)"
"addToManagedFromRoot(Object, NonPortableEventContext)" -> "AddManagedObjectAction.visit()"
"addToSharedFromRoot(Object, NonPortableEventContext)" -> "SharedObjectsAction.visit()"
"basicCreateIfNecessary(Object)" -> "factory.getNewInstance()"
"basicCreateIfNecessary(Object)" -> "basicLookup(Object)"
"basicCreateIfNecessary(Object)" -> "basicAddLocal(TCObject, boolean)"
"basicShareObjectIfNecessary(Object)" -> "factory.getNewInstance()"
"basicShareObjectIfNecessary(Object)" -> "basicAddLocal(TCObject, boolean)"
"AddManagedObjectAction.visit()" -> "basicCreateIfNecessary(Object)"
"AddManagedObjectAction.visit()" -> "basicLookup(Object)"
"SharedObjectsAction.visit()" -> "basicShareObjectIfNecessary(Object)"
"SharedObjectsAction.visit()" -> "basicLookup(Object)"
"factory.getNewInstance()" -> "TCClass.createTCObject(ObjectID, Object, boolean)"
"TCClass.createTCObject(ObjectID, Object, boolean)" -> "TCObjectLogical()"
"TCClass.createTCObject(ObjectID, Object, boolean)" -> "TCObjectPhysical()"