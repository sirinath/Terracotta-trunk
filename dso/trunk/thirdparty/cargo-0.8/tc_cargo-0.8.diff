diff -ruN cargo-0.8/src/0.8/core/api/container/src/main/java/org/codehaus/cargo/container/spi/AbstractInstalledLocalContainer.java tc_cargo-0.8/src/0.8/core/api/container/src/main/java/org/codehaus/cargo/container/spi/AbstractInstalledLocalContainer.java
--- cargo-0.8/src/0.8/core/api/container/src/main/java/org/codehaus/cargo/container/spi/AbstractInstalledLocalContainer.java	2006-04-28 20:43:14.000000000 -0700
+++ tc_cargo-0.8/src/0.8/core/api/container/src/main/java/org/codehaus/cargo/container/spi/AbstractInstalledLocalContainer.java	2006-08-01 11:53:35.000000000 -0700
@@ -22,10 +22,17 @@
  */
 package org.codehaus.cargo.container.spi;
 
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.lang.reflect.Constructor;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
 import org.apache.tools.ant.taskdefs.Java;
 import org.apache.tools.ant.types.Path;
-import org.codehaus.cargo.container.ContainerType;
 import org.codehaus.cargo.container.ContainerException;
+import org.codehaus.cargo.container.ContainerType;
 import org.codehaus.cargo.container.InstalledLocalContainer;
 import org.codehaus.cargo.container.configuration.LocalConfiguration;
 import org.codehaus.cargo.container.internal.util.AntBuildListener;
@@ -36,30 +43,23 @@
 import org.codehaus.cargo.container.property.GeneralPropertySet;
 import org.codehaus.cargo.util.FileUtils;
 
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-
 /**
  * Default container implementation that all local installed container implementations must extend.
  * 
  * @version $Id: AbstractInstalledLocalContainer.java 889 2006-03-01 17:48:24Z vmassol $
  */
-public abstract class AbstractInstalledLocalContainer
-    extends AbstractLocalContainer implements InstalledLocalContainer
+public abstract class AbstractInstalledLocalContainer extends AbstractLocalContainer implements
+    InstalledLocalContainer
 {
     /**
-     * List of system properties to set in the container JVM. 
+     * List of system properties to set in the container JVM.
      */
     private Map systemProperties;
 
     /**
-     * Additional classpath entries for the classpath that will be used to 
-     * start the containers.
+     * Additional classpath entries for the classpath that will be used to start the containers.
      */
-    private String[] extraClasspath;    
+    private String[] extraClasspath;
 
     /**
      * The container home installation directory.
@@ -90,11 +90,12 @@
      * File utility class.
      */
     private FileUtils fileUtils;
-    
+
     /**
      * Default constructor.
+     * 
      * @param configuration the configuration to associate to this container. It can be changed
-     *        later on by calling {@link #setConfiguration(LocalConfiguration)}
+     *            later on by calling {@link #setConfiguration(LocalConfiguration)}
      */
     public AbstractInstalledLocalContainer(LocalConfiguration configuration)
     {
@@ -114,7 +115,7 @@
     {
         return this.httpUtils;
     }
-    
+
     /**
      * @return the JDK utility class
      */
@@ -146,7 +147,7 @@
     {
         return this.fileUtils;
     }
-    
+
     /**
      * @see InstalledLocalContainer#setHome(File)
      */
@@ -162,7 +163,7 @@
     {
         Map props = new HashMap();
         props.putAll(properties);
-        
+
         this.systemProperties = props;
     }
 
@@ -188,7 +189,7 @@
     public String[] getExtraClasspath()
     {
         return this.extraClasspath;
-    }   
+    }
 
     /**
      * @see InstalledLocalContainer#getHome()
@@ -201,9 +202,9 @@
     /**
      * Implementation of {@link org.codehaus.cargo.container.LocalContainer#start()} that all
      * containers extending this class must implement.
-     *
+     * 
      * @param java the predefined Ant {@link org.apache.tools.ant.taskdefs.Java} command to use to
-     *             start the container
+     *            start the container
      * @throws Exception if any error is raised during the container start
      */
     protected abstract void doStart(Java java) throws Exception;
@@ -211,7 +212,7 @@
     /**
      * Implementation of {@link org.codehaus.cargo.container.LocalContainer#stop()} that all
      * containers extending this class must implement.
-     *
+     * 
      * @param java the predefined Ant {@link Java} command to use to stop the container
      * @throws Exception if any error is raised during the container stop
      */
@@ -234,8 +235,8 @@
     }
 
     /**
-     * Creates a preinitialized instance of the Ant Java task to be used for
-     * shutting down the container.
+     * Creates a preinitialized instance of the Ant Java task to be used for shutting down the
+     * container.
      * 
      * @return The created task instance
      */
@@ -249,29 +250,58 @@
         // Add a build listener to the Ant project so that we can catch what the Java task logs
         java.getProject().addBuildListener(
             new AntBuildListener(getLogger(), this.getClass().getName()));
-        
+
         // Add extra container classpath entries specified by the user.
         addExtraClasspath(java);
 
         // Add JVM args if defined
-        String jvmargs = getConfiguration().getPropertyValue(GeneralPropertySet.JVMARGS); 
-        if (jvmargs != null)
+        // String jvmargs = getConfiguration().getPropertyValue(GeneralPropertySet.JVMARGS);
+        // if (jvmargs != null)
+        // {
+        // java.createJvmarg().setLine(jvmargs);
+        //        }
+
+        return java;
+    }
+
+    /**
+     * Terracotta - Linked Process
+     * 
+     * @return Java
+     */
+    private Java getJava()
+    {
+        String cargoJava = System.getProperty("cargo_java");
+        Java java = (Java) getAntUtils().createAntTask("java");
+        if (cargoJava != null)
         {
-            java.createJvmarg().setLine(jvmargs);
+            try
+            {
+                Class cargoJavaClass = Class.forName(cargoJava);
+                Constructor cargoJavaConstructor = cargoJavaClass
+                    .getConstructor(new Class[] {Java.class});
+                java = (Java) cargoJavaConstructor.newInstance(new Object[] {java});
+            }
+            catch (Exception e)
+            {
+                getLogger().debug("unable to load CargoJava from system property cargo_java",
+                    getClass().getName());
+                e.printStackTrace();
+            }
         }
-        
         return java;
     }
 
     /**
-     * Creates a preinitialized instance of the Ant Java task to be used for starting down the 
+     * Creates a preinitialized instance of the Ant Java task to be used for starting down the
      * container.
      * 
      * @return The created task instance
      */
     private Java createJavaForStartUp()
     {
-        Java java = (Java) getAntUtils().createAntTask("java");
+        // Terracotta
+        Java java = getJava();
         java.setFork(true);
         java.setOutput(getOutput());
         java.setAppend(isAppend());
@@ -279,20 +309,20 @@
         // Add a build listener to the Ant project so that we can catch what the Java task logs
         java.getProject().addBuildListener(
             new AntBuildListener(getLogger(), this.getClass().getName()));
-        
+
         // Add extra container classpath entries specified by the user.
         addExtraClasspath(java);
-       
+
         // Add system properties for the container JVM
         addSystemProperties(java);
 
         // Add JVM args if defined
-        String jvmargs = getConfiguration().getPropertyValue(GeneralPropertySet.JVMARGS); 
+        String jvmargs = getConfiguration().getPropertyValue(GeneralPropertySet.JVMARGS);
         if (jvmargs != null)
         {
             java.createJvmarg().setLine(jvmargs);
         }
-        
+
         return java;
     }
 
@@ -309,31 +339,29 @@
             while (keys.hasNext())
             {
                 String key = (String) keys.next();
-    
-                java.addSysproperty(getAntUtils().createSysProperty(key, 
+
+                java.addSysproperty(getAntUtils().createSysProperty(key,
                     (String) getSystemProperties().get(key)));
             }
         }
     }
-    
+
     /**
-     * Adds the tools.jar to the classpath, except for Mac OSX as it is not
-     * needed.
+     * Adds the tools.jar to the classpath, except for Mac OSX as it is not needed.
      * 
      * @param classpath the classpath object to which to add the tools.jar
-     * @exception FileNotFoundException in case the tools.jar file cannot be
-     *            found
+     * @exception FileNotFoundException in case the tools.jar file cannot be found
      */
     protected final void addToolsJarToClasspath(Path classpath) throws FileNotFoundException
     {
-        // On OSX, the tools.jar classes are included in the classes.jar so there is no need to 
+        // On OSX, the tools.jar classes are included in the classes.jar so there is no need to
         // include any tools.jar file to the cp.
         if (!getJdkUtils().isOSX())
-        {    
+        {
             classpath.createPathElement().setLocation(getJdkUtils().getToolsJar());
         }
     }
-    
+
     /**
      * Add extra container classpath entries specified by the user.
      * 
@@ -354,10 +382,10 @@
                 getLogger().debug("Adding [" + pathElement + "] to execution classpath",
                     this.getClass().getName());
             }
-            
+
             classpath.addExisting(path);
-        }        
-    }    
+        }
+    }
 
     /**
      * @see org.codehaus.cargo.container.spi.AbstractLocalContainer#verify()
diff -ruN cargo-0.8/src/0.8/core/containers/weblogic/src/main/resources/org/codehaus/cargo/container/internal/resources/weblogic8x/config.xml tc_cargo-0.8/src/0.8/core/containers/weblogic/src/main/resources/org/codehaus/cargo/container/internal/resources/weblogic8x/config.xml
--- cargo-0.8/src/0.8/core/containers/weblogic/src/main/resources/org/codehaus/cargo/container/internal/resources/weblogic8x/config.xml	2007-01-29 12:19:54.906465000 -0800
+++ tc_cargo-0.8/src/0.8/core/containers/weblogic/src/main/resources/org/codehaus/cargo/container/internal/resources/weblogic8x/config.xml	2007-01-29 12:29:04.684196400 -0800
@@ -2,6 +2,10 @@
 
 <Domain Name="domain">
   <Server Name="server" ListenPort="@cargo.servlet.port@"
-    NativeIOEnabled="false"/>
+          NativeIOEnabled="false"
+          SocketReaderTimeoutMaxMillis="1000"
+          SocketReaderTimeoutMinMillis="1000"
+          StdoutDebugEnabled="true"
+          StdoutSeverityLevel="64"/>
   @weblogic.apps@
 </Domain>
