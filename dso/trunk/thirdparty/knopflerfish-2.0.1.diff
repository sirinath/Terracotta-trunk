diff -ur knopflerfish_osgi_2.0.1/knopflerfish.org/osgi/framework/src/org/knopflerfish/framework/Framework.java knopflerfish_osgi_2.0.1.orig/knopflerfish.org/osgi/framework/src/org/knopflerfish/framework/Framework.java
--- knopflerfish_osgi_2.0.1/knopflerfish.org/osgi/framework/src/org/knopflerfish/framework/Framework.java	2008-01-08 16:26:44.015625000 -0800
+++ knopflerfish_osgi_2.0.1.orig/knopflerfish.org/osgi/framework/src/org/knopflerfish/framework/Framework.java	2008-01-08 16:24:36.875000000 -0800
@@ -234,7 +234,7 @@
     }
         
     ProtectionDomain pd = null;
-    if (false && System.getSecurityManager() != null) {
+    if (System.getSecurityManager() != null) {
       try {
         pd = getClass().getProtectionDomain();
       } catch (Throwable t) {
diff -ur knopflerfish_osgi_2.0.1/knopflerfish.org/osgi/framework/src/org/knopflerfish/framework/StartLevelImpl.java knopflerfish_osgi_2.0.1.orig/knopflerfish.org/osgi/framework/src/org/knopflerfish/framework/StartLevelImpl.java
--- knopflerfish_osgi_2.0.1/knopflerfish.org/osgi/framework/src/org/knopflerfish/framework/StartLevelImpl.java	2008-01-08 16:26:26.453125000 -0800
+++ knopflerfish_osgi_2.0.1.orig/knopflerfish.org/osgi/framework/src/org/knopflerfish/framework/StartLevelImpl.java	2008-01-08 16:24:37.062500000 -0800
@@ -91,7 +91,6 @@
     }
     Runnable firstJob = (Runnable)jobQueue.firstElement();
     wc   = new Thread(this, "startlevel job thread");
-    wc.setDaemon(true);
     synchronized (firstJob) {
       bRun = true;
       wc.start();

--- knopflerfish_osgi_2.0.1/knopflerfish.org/osgi/framework/src/org/knopflerfish/framework/Version.java	2010-07-06 14:43:42.268986700 -0700
+++ knopflerfish_osgi_2.0.1.orig/knopflerfish.org/osgi/framework/src/org/knopflerfish/framework/Version.java	2010-04-16 13:23:16.705909200 -0700
@@ -30,8 +30,8 @@
  * <li>Major version. A non-negative integer.</li>
  * <li>Minor version. A non-negative integer.</li>
  * <li>Micro version. A non-negative integer.</li>
- * <li>Qualifier. A text string. See <code>Version(String)</code> for the format
- * of the qualifier string.</li>
+ * <li>Qualifier. A text string. See <code>Version(String)</code> for the
+ * format of the qualifier string.</li>
  * </ol>
  * 
  * <p>
@@ -60,14 +60,11 @@
 	 * <p>
 	 * The qualifier is set to the empty string.
 	 * 
-	 * @param major
-	 *            Major component of the version identifier.
-	 * @param minor
-	 *            Minor component of the version identifier.
-	 * @param micro
-	 *            Micro component of the version identifier.
-	 * @throws IllegalArgumentException
-	 *             If the numerical components are negative.
+	 * @param major Major component of the version identifier.
+	 * @param minor Minor component of the version identifier.
+	 * @param micro Micro component of the version identifier.
+	 * @throws IllegalArgumentException If the numerical components are
+	 *         negative.
 	 */
 	public Version(int major, int minor, int micro) {
 		this(major, minor, micro, null);
@@ -76,19 +73,14 @@
 	/**
 	 * Creates a version identifier from the specifed components.
 	 * 
-	 * @param major
-	 *            Major component of the version identifier.
-	 * @param minor
-	 *            Minor component of the version identifier.
-	 * @param micro
-	 *            Micro component of the version identifier.
-	 * @param qualifier
-	 *            Qualifier component of the version identifier. If
+	 * @param major Major component of the version identifier.
+	 * @param minor Minor component of the version identifier.
+	 * @param micro Micro component of the version identifier.
+	 * @param qualifier Qualifier component of the version identifier. If
 	 *            <code>null</code> is specified, then the qualifier will be set
 	 *            to the empty string.
-	 * @throws IllegalArgumentException
-	 *             If the numerical components are negative or the qualifier
-	 *             string is invalid.
+	 * @throws IllegalArgumentException If the numerical components are negative
+	 *         or the qualifier string is invalid.
 	 */
 	public Version(int major, int minor, int micro, String qualifier) {
 		if (qualifier == null) {
@@ -120,10 +112,9 @@
 	 * 
 	 * There must be no whitespace in version.
 	 * 
-	 * @param version
-	 *            String representation of the version identifier.
-	 * @throws IllegalArgumentException
-	 *             If <code>version</code> is improperly formatted.
+	 * @param version String representation of the version identifier.
+	 * @throws IllegalArgumentException If <code>version</code> is improperly
+	 *         formatted.
 	 */
 	public Version(String version) {
 		int major = 0;
@@ -153,7 +144,8 @@
 					}
 				}
 			}
-		} catch (NoSuchElementException e) {
+		}
+		catch (NoSuchElementException e) {
 			throw new IllegalArgumentException("invalid format"); //$NON-NLS-1$
 		}
 
@@ -167,9 +159,8 @@
 	/**
 	 * Called by the Version constructors to validate the version components.
 	 * 
-	 * @throws IllegalArgumentException
-	 *             If the numerical components are negative or the qualifier
-	 *             string is invalid.
+	 * @throws IllegalArgumentException If the numerical components are negative
+	 *         or the qualifier string is invalid.
 	 */
 	private void validate() {
 		if (major < 0) {
@@ -195,14 +186,14 @@
 	 * <p>
 	 * See <code>Version(String)</code> for the format of the version string.
 	 * 
-	 * @param version
-	 *            String representation of the version identifier. Leading and
-	 *            trailing whitespace will be ignored.
+	 * @param version String representation of the version identifier. Leading
+	 *        and trailing whitespace will be ignored.
 	 * @return A <code>Version</code> object representing the version
-	 *         identifier. If <code>version</code> is <code>null</code> or the
-	 *         empty string then <code>emptyVersion</code> will be returned.
-	 * @throws IllegalArgumentException
-	 *             If <code>version</code> is improperly formatted.
+	 *         identifier. If <code>version</code> is <code>null</code> or
+	 *         the empty string then <code>emptyVersion</code> will be
+	 *         returned.
+	 * @throws IllegalArgumentException If <code>version</code> is improperly
+	 *         formatted.
 	 */
 	public static Version parseVersion(String version) {
 		if (version == null) {
@@ -263,12 +254,12 @@
 	 * 
 	 * @return The string representation of this version identifier.
 	 */
-	@Override
 	public String toString() {
 		String base = major + SEPARATOR + minor + SEPARATOR + micro;
 		if (qualifier.length() == 0) { //$NON-NLS-1$
 			return base;
-		} else {
+		}
+		else {
 			return base + SEPARATOR + qualifier;
 		}
 	}
@@ -278,7 +269,6 @@
 	 * 
 	 * @return An integer which is a hash code value for this object.
 	 */
-	@Override
 	public int hashCode() {
 		return (major << 24) + (minor << 16) + (micro << 8)
 				+ qualifier.hashCode();
@@ -292,13 +282,11 @@
 	 * major, minor and micro components are equal and the qualifier component
 	 * is equal (using <code>String.equals</code>).
 	 * 
-	 * @param object
-	 *            The <code>Version</code> object to be compared.
+	 * @param object The <code>Version</code> object to be compared.
 	 * @return <code>true</code> if <code>object</code> is a
 	 *         <code>Version</code> and is equal to this object;
 	 *         <code>false</code> otherwise.
 	 */
-	@Override
 	public boolean equals(Object object) {
 		if (object == this) { // quicktest
 			return true;
@@ -331,13 +319,12 @@
 	 * major, minor and micro components are equal and the qualifier component
 	 * is equal (using <code>String.compareTo</code>).
 	 * 
-	 * @param object
-	 *            The <code>Version</code> object to be compared.
+	 * @param object The <code>Version</code> object to be compared.
 	 * @return A negative integer, zero, or a positive integer if this object is
 	 *         less than, equal to, or greater than the specified
 	 *         <code>Version</code> object.
-	 * @throws ClassCastException
-	 *             If the specified object is not a <code>Version</code>.
+	 * @throws ClassCastException If the specified object is not a
+	 *         <code>Version</code>.
 	 */
 	public int compareTo(Object object) {
 		if (object == this) { // quicktest
@@ -361,17 +348,6 @@
 			return result;
 		}
 
-		// Any version with a qualifier is considered "less than" a version
-		// without:
-		// 1.0.0-SNAPSHOT < 1.0.0
-		if (qualifier.length() == 0) {
-			if (other.qualifier.length() > 0) {
-				return 1;
-			}
-		} else if (other.qualifier.length() == 0) {
-			return -1;
-		}
-
 		return qualifier.compareTo(other.qualifier);
 	}
 }
