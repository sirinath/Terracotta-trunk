Index: core/containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/internal/AbstractJBossInstalledLocalContainer.java
===================================================================
--- core/containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/internal/AbstractJBossInstalledLocalContainer.java	(revision 1460)
+++ core/containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/internal/AbstractJBossInstalledLocalContainer.java	(working copy)
@@ -114,12 +114,17 @@
             "--server=" + getConfiguration().getPropertyValue(GeneralPropertySet.HOSTNAME) + ":"
                 + getConfiguration().getPropertyValue(GeneralPropertySet.RMI_PORT));
 
+        // ADDED BY HHUYNH
+        java.execute();
+        
+        /* COMMENTED OUT BY HHUYNH
         AntContainerExecutorThread jbossRunner = new AntContainerExecutorThread(java);
         jbossRunner.start();
 
         // Sleep some extra time to fully ensure JBoss is stopped before giving back the control
         // to the user.
         Thread.sleep(2000L);
+        */
     }
 
     /**
Index: core/api/container/src/main/java/org/codehaus/cargo/container/deployer/URLDeployableMonitor.java
===================================================================
--- core/api/container/src/main/java/org/codehaus/cargo/container/deployer/URLDeployableMonitor.java	(revision 1460)
+++ core/api/container/src/main/java/org/codehaus/cargo/container/deployer/URLDeployableMonitor.java	(working copy)
@@ -101,14 +101,14 @@
      */
     public void monitor()
     {
-        getLogger().debug("Checking URL [" + this.pingURL + "] for status using a timeout of ["
+        getLogger().info("Checking URL [" + this.pingURL + "] for status using a timeout of ["
             + this.timeout + "] ms...", this.getClass().getName());
 
         // We check if the deployable is servicing requests by pinging a URL specified by the user
         HttpUtils.HttpResult results = new HttpUtils.HttpResult();
         boolean isDeployed = this.httpUtils.ping(this.pingURL, results);
 
-        getLogger().debug("URL [" + this.pingURL + "] is " + (isDeployed ? "" : "not ")
+        getLogger().info("URL [" + this.pingURL + "] is " + (isDeployed ? "" : "not ")
             + "responding...", this.getClass().getName());
 
         Iterator it = this.listeners.iterator();
@@ -116,7 +116,7 @@
         {
             DeployableMonitorListener listener = (DeployableMonitorListener) it.next();
 
-            getLogger().debug("Notifying monitor listener [" + listener + "]",
+            getLogger().info("Notifying monitor listener [" + listener + "]",
                 this.getClass().getName());
 
             if (isDeployed)
Index: core/api/container/src/main/java/org/codehaus/cargo/container/spi/AbstractInstalledLocalContainer.java
===================================================================
--- core/api/container/src/main/java/org/codehaus/cargo/container/spi/AbstractInstalledLocalContainer.java	(revision 1460)
+++ core/api/container/src/main/java/org/codehaus/cargo/container/spi/AbstractInstalledLocalContainer.java	(working copy)
@@ -22,10 +22,17 @@
  */
 package org.codehaus.cargo.container.spi;
 
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.lang.reflect.Constructor;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
 import org.apache.tools.ant.taskdefs.Java;
 import org.apache.tools.ant.types.Path;
+import org.codehaus.cargo.container.ContainerException;
 import org.codehaus.cargo.container.ContainerType;
-import org.codehaus.cargo.container.ContainerException;
 import org.codehaus.cargo.container.InstalledLocalContainer;
 import org.codehaus.cargo.container.configuration.LocalConfiguration;
 import org.codehaus.cargo.container.internal.util.AntBuildListener;
@@ -128,7 +135,7 @@
     {
         return this.httpUtils;
     }
-    
+
     /**
      * @return the JDK utility class
      */
@@ -170,7 +177,7 @@
     {
         this.fileHandler = fileHandler;
     }
-    
+
     /**
      * {@inheritDoc}
      * @see InstalledLocalContainer#setHome(String) 
@@ -188,7 +195,7 @@
     {
         Map props = new HashMap();
         props.putAll(properties);
-        
+
         this.systemProperties = props;
     }
 
@@ -217,7 +224,7 @@
     public String[] getExtraClasspath()
     {
         return this.extraClasspath;
-    }   
+    }
 
     /**
      * {@inheritDoc}
@@ -231,9 +238,9 @@
     /**
      * Implementation of {@link org.codehaus.cargo.container.LocalContainer#start()} that all
      * containers extending this class must implement.
-     *
+     * 
      * @param java the predefined Ant {@link org.apache.tools.ant.taskdefs.Java} command to use to
-     *             start the container
+     *            start the container
      * @throws Exception if any error is raised during the container start
      */
     protected abstract void doStart(Java java) throws Exception;
@@ -241,7 +248,7 @@
     /**
      * Implementation of {@link org.codehaus.cargo.container.LocalContainer#stop()} that all
      * containers extending this class must implement.
-     *
+     * 
      * @param java the predefined Ant {@link Java} command to use to stop the container
      * @throws Exception if any error is raised during the container stop
      */
@@ -253,7 +260,7 @@
      */
     protected final void startInternal() throws Exception
     {
-        doStart(createJavaTask());
+        doStart(createJavaTask("start"));
     }
 
     /**
@@ -262,7 +269,7 @@
      */
     protected final void stopInternal() throws Exception
     {
-        doStop(createJavaTask());
+        doStop(createJavaTask("stop"));
     }
 
     /**
@@ -271,9 +278,16 @@
      *
      * @return The created task instance
      */
-    private Java createJavaTask()
+    private Java createJavaTask(String task)
     {
-        Java java = (Java) getAntUtils().createAntTask("java");
+        Java java = null;
+      
+        if (task.equals("start")) {
+          java = getTerracottaJava();
+        } else {
+          java = (Java) getAntUtils().createAntTask("java");
+        }        
+        
         java.setFork(true);
 
         // If the user has not specified any output file then the process's output will be logged
@@ -288,20 +302,20 @@
         // Add a build listener to the Ant project so that we can catch what the Java task logs
         java.getProject().addBuildListener(
             new AntBuildListener(getLogger(), this.getClass().getName()));
-        
+
         // Add extra container classpath entries specified by the user.
         addExtraClasspath(java);
-       
+
         // Add system properties for the container JVM
         addSystemProperties(java);
 
         // Add JVM args if defined
-        String jvmargs = getConfiguration().getPropertyValue(GeneralPropertySet.JVMARGS); 
+        String jvmargs = getConfiguration().getPropertyValue(GeneralPropertySet.JVMARGS);
         if (jvmargs != null)
         {
             java.createJvmarg().setLine(jvmargs);
         }
-        
+
         return java;
     }
 
@@ -318,31 +332,29 @@
             while (keys.hasNext())
             {
                 String key = (String) keys.next();
-    
-                java.addSysproperty(getAntUtils().createSysProperty(key, 
+
+                java.addSysproperty(getAntUtils().createSysProperty(key,
                     (String) getSystemProperties().get(key)));
             }
         }
     }
-    
+
     /**
-     * Adds the tools.jar to the classpath, except for Mac OSX as it is not
-     * needed.
+     * Adds the tools.jar to the classpath, except for Mac OSX as it is not needed.
      * 
      * @param classpath the classpath object to which to add the tools.jar
-     * @exception FileNotFoundException in case the tools.jar file cannot be
-     *            found
+     * @exception FileNotFoundException in case the tools.jar file cannot be found
      */
     protected final void addToolsJarToClasspath(Path classpath) throws FileNotFoundException
     {
-        // On OSX, the tools.jar classes are included in the classes.jar so there is no need to 
+        // On OSX, the tools.jar classes are included in the classes.jar so there is no need to
         // include any tools.jar file to the cp.
         if (!getJdkUtils().isOSX())
-        {    
+        {
             classpath.createPathElement().setLocation(getJdkUtils().getToolsJar());
         }
     }
-    
+
     /**
      * Add extra container classpath entries specified by the user.
      * 
@@ -363,10 +375,10 @@
                 getLogger().debug("Adding [" + pathElement + "] to execution classpath",
                     this.getClass().getName());
             }
-            
+
             classpath.addExisting(path);
-        }        
-    }    
+        }
+    }
 
     /**
      * {@inheritDoc}
@@ -403,4 +415,32 @@
     {
         return ContainerType.INSTALLED;
     }
+    
+    /**
+     * Terracotta - Linked Process
+     * 
+     * @return Java
+     */
+    private Java getTerracottaJava()
+    {
+        String cargoJava = System.getProperty("cargo_java");
+        Java java = (Java) getAntUtils().createAntTask("java");
+        if (cargoJava != null)
+        {
+            try
+            {
+                Class cargoJavaClass = Class.forName(cargoJava);
+                Constructor cargoJavaConstructor = cargoJavaClass
+                    .getConstructor(new Class[] {Java.class});
+                java = (Java) cargoJavaConstructor.newInstance(new Object[] {java});
+            }
+            catch (Exception e)
+            {
+                getLogger().debug("unable to load CargoJava from system property cargo_java",
+                    getClass().getName());
+                e.printStackTrace();
+            }
+        }
+        return java;
+    }
 }
