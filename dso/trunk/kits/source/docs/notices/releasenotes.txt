
Nightly Build from Trunk


Documentation: http://www.terracotta.org/confluence/display/docs1/Terracotta+Product+Documentation
Forums:        http://forums.terracotta.org/forums/forums/list.page
Mailing Lists: http://lists.terracotta.org
Support:       http://www.terracotta.org/confluence/display/orgsite/Support

2.4 Release Notes
Diskless Active/Passive

    * CDV-38
          o Synchronously Share State with a Passive without need for disk infrastructure
          o Can add/remove passives without interruption of Active

L1 Reconnect

    * CDV-97
          o Allow the L1 to reconnect to the L2 within a configurable time window so as to be more resilient to network glitches

Subtype Instrumentation

    * CDV-184
          o Broaden class instrumentation support by allowing subtypes to be specified

Run Samples on Multiple Nodes

    * CDV-186
          o Sample applications can be run on multiple nodes

Verify boot-jar tool

    * CDV-148 Tool to verify boot-jar for a given configuration
          o Added -w option to always create boot jar
          o See Terracotta Tools documentation for more information

Force dgc via the AdminConsole

    * CDV-198

Additional java.util Classes Supported

    * CDV-179
          o java.util.concurrent.Locks.ReentrantReadWriteLock
          o java.util.concurrent.Locks.ReentrantReadWriteLock.ReadLock
          o java.util.concurrent.Locks.ReentrantReadWriteLock.WriteLock

Integrations

    * Websphere CDV-181 IBM WAS Session Clustering and POJOs roots
    * Hibernate CDV-189
    * Rife CDV-225
    * EHCache CDV-185
    * Wicket CDV-57

Bug Fixes

View Jira https://jira.terracotta.org/jira/secure/BrowseProject.jspa?id=10172&subset=3 for recent fixes.

Known Issues

    * CDV-256 *..* include pattern not currently functional under IBM JDK

    * CDV-255 default java security policy under Websphere AS doesn't work correctly with Terracotta.
          o Workaround: Change the policy file, commenting out all of the defaults and adding just this:

            grant {
                 permission java.security.AllPermission;
               };

    * CDV-254 Class sharing under IBM VM issues with DSO.
          o Workaround: Disable class sharing (-Xshareclasses:none)

    * This release supports the use of the THashMap and THashSet classes from the trove library (http://trove4j.sourceforge.net/, only version 1.1b5 is officially supported in this release). THashMap and THashSet support the use of user customized hashing strategies through via the TObjectHashingStrategy interface. When distributing THashMap/THashSet instances, only the default hashing strategy is supported. Any custom hash strategy will not be honored across the cluster.

    * Terracotta Sessions Configurator creates a test environment that depends on running two domains (instances) of a web container (AppServer) from a single install source. IBM WebSphere CE does not support multiple domains in a manner that is compatible with Configurator. However, you can use Configurator to test a web application deployed on Apache Tomcat. After you have configured your web application to run clustered with Terracotta Sessions, use the generated tc-config.xml file to deploy the web application on IBM WebSphere CE running with Terracotta Sessions.

    * OOME in Permspace

      SEVERE: Error deploying web application directory search
      org.apache.commons.logging.LogConfigurationException:
      java.lang.OutOfMemoryError: PermGen space (Caused by java.lang.OutOfMemoryError: PermGen space) at
      org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:538) at ...

      Increase the permspace by passing the correct jvm arguments.

    * Max server object count capped by int
      There could be some unexpected behaviour if the database has more than max int/2 objects in it.

    * Possible double notifies after server restart
      It is possible to receive double notifies on server restart
          o This is caused by
                + Thread1 is selected to be the notified thread in the server and the
                  notification succeeds
                + The server crashes
                + When the server comes back up and the outstanding transactions are re-sent, the server chooses a different thread to be the notified thread and THAT notify also succeeds.
          o The solution is
                + On the receiving client side, keep track of the server transaction id that caused the notify.
                + On client reconnect, the client lock state should contain the notifier
                  server transaction id
                + The server lock manager can then decide whether or not to choose a notified
                  thread for a given transaction based on whether that transaction's notified
                  thread has already been applied




Copyright (c) 2007, Terracotta, Inc.
http://www.terracotta.org
