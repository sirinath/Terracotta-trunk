Terracotta Release Notes
Version 2.2

Documentation: http://docs.terracotta.org
Forums:        http://www.terracottatech.com/forums/
Mailing Lists: http://lists.terracotta.org
Services:      http://www.terracottatech.com/support_services.shtml


Improvements and New Features for v2.2
======================================

JVM and Platform Component Support:

1) Terracotta Sessions and Terracotta DSO now have beta support for IBM
   WebSphere AS CE 1.0.1.

2) Terracotta for Spring adds support for Spring Framework 2.0 and Web
   Flow 1.0, including clustering session beans and custom beans.

Capabilities and Performance:

1) Support has been added for subclasses of Collections.

2) JMX visibility has been added for Enterprise Management Consoles to view
   runtime operational data.  Information is available through standard JMX
   for such data as sessions created per unit time and objects created per
   unit time by class.  Additionally, operators can dynamically invalidate
   individual sessions.

3) Performance enhancements include:
   - Heap size throttle (percent of JVM heap utilization)
   - Improved Distributed Garbage Collection (DGC)
   - Faster array writes
   - Proxied values for Hashtable and HashMap to optimize network traffic
   - Improved locking semantics for sessions
   - Faster persistent mode with more efficient disk usage

Configuration:

1) The XML namespace for the Terracotta configuration file schema has
   permanently changed from:
      http://www.terracottatech.com/config-V1
   to:
      http://www.terracotta.org/config

2) The following elements have been removed from the Terracotta
   configuration file format because the associated functionality has been
   removed:

   - system elements http-enabled and http-port; there is no longer
     a customer-facing embedded web server

   - system element jmx-enabled; JMX is now required

   - system element jmx-http-enabled and server element jmx-http-port;
     the HTTP interface to JMX in the server has been removed

   - application DSO element change-listener; it was felt this feature
     was being misused
   
   - client DSO element max-in-memory-object and server DSO element
     server-cached-object-count; a new memory manager has been
     introduced that uses a threshold-based eviction policy

   - application element jdbc, system element jdbc-enabled and server
     element jdbc-port; the JDBC product has been removed

Usability:

1) The new Terracotta Welcome application provides navigation for
   developers and operators to learn about Terracotta.

2) The new Sample Application Launcher enables running each the examples
   from a single tool.

3) If you were specifying a client configuration via the servers HTTP port
   like so:
   
      -Dtc.config=http://[server-host]:[http-port]/config

   You should now specify the server host, dso-port tuple like so:

      -Dtc.config=[server-host]:[dso-port]

4) The "demo" server configuration mode has been removed and the remaining
   "development" and "production" modes have been simplified.  In
   development mode a DSO client may use any configuration source and it is
   up to the developer to ensure the configuration does not clash with
   other client configuration.  In production mode, it is enforced that the
   server is the client configuration source, as specified by:

      -Dtc.config=[server-host]:[dso-port].

5) The start-tc-server script no longer support the --create-config option
   for creating a new default configuration file.  Now each product comes
   with template configuration files in the "config-samples" directory.


Known Issues
============
- Terracotta Sessions Configurator creates a test environment that depends
  on running two domains (instances) of a web container (AppServer) from a
  single install source.  IBM WebSphere CE does not support multiple
  domains in a manner that is compatible with Configurator.  However, you
  can use Configurator to test a web application deployed on Apache
  Tomcat.  After you have configured your web application to run clustered
  with Terracotta Sessions, use the generated tc-config.xml file to deploy
  the web application on IBM WebSphere CE running with Terracotta
  Sessions.

- Support for GNU Trove for high performance collections includes THashMap
  and THashSet.  However, these classes allow for a pluggable hashing
  strategy, and Terracotta does not maintain this aspect of the instance's
  state.

- The initial capacity and load factor attributes of a shared
  java.util.Map (HashMap, TreeMap, THashMap, etc.) are not preserved in the
  shared versions.

- There is a known performance issue using the fill(), sort(), and equals()
  methods of java.util.Arrays on shared objects.  Adjust the includes and
  excludes of the configuration file so the array is not part of the DSO
  object graph.

- Distributed method calls are by design invoked asynchronously
  throughout the cluster.  The original caller of the distributed method
  will block only until DSO has recorded the method call.  If a node exits
  before it is sent the asynchronous distributed call, it will never invoke
  the method call locally (since the VM has exited).

- The JMX sample application shipped with Terracotta for Spring requires an
  MBean server.  The sample application may not function properly when run
  on BEA WebLogic 8.1 with JRE 1.4 as the application was not designed and
  tested with WebLogic's MBean server.


----
The most up-to-date version of this document can be found at:
   http://docs.terracotta.org/

Copyright (c) 2006, Terracotta, Inc.
http://www.terracotta.org
