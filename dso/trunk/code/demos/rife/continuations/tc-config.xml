<?xml version="1.0" encoding="ISO-8859-1"?>
<!--

  All content copyright (c) 2003-2007 Terracotta, Inc.,
  except as may otherwise be noted in a separate copyright notice.
  All rights reserved

-->
<tc:tc-config xmlns:tc="http://www.terracotta.org/config">
  <!-- Server is colocated with client and DSO is listening on
       default port (9510).-->
  <servers>
    <server host="%i" name="sample"/>
    <update-check>
      <enabled>true</enabled>
    </update-check>
  </servers>
  
  <!-- Configure DSO for 'development' mode;
       See the Terracotta DSO Guide for additional information. -->
  <system>
    <configuration-model>development</configuration-model>
  </system>

  <clients>
    <!-- Tell DSO where to put the generated client logs
         See the Terracotta Configuration Guide and Reference for additional
         information.-->
    <logs>%(user.home)/terracotta/client-logs/rife/continuations/%D</logs>
    <statistics>%(user.home)/terracotta/client-statistics/rife/continuations/%D</statistics>
    
    <!-- Tell DSO to load the RIFE 1.6.0 module. -->
    <modules>
      <module name="clustered-rife-1.6.0" version="2.6.0.SNAPSHOT"/>
    </modules>
  </clients>
  
  <application>
    <dso>
      <!-- Our app requires these custom objects/classes to be shared - the following declarations
           tells DSO which ones they are. When the app runs under DSO, instances of these classes
           will broadcast changes in their state.

           A good idiom when writing an app that you intend to cluster via TC DSO, is to group the
           classes you wish to share under a single package (although if you follow the MVC pattern
           this tends to happen naturally) - this way the list of classes you wish to instrument
           can be concise -->
      <instrumented-classes>
        <!-- Here, we're essentially saying, treat the all of the classes found in the: 'demo.continuations', 
            package as shareable; For a "live" application, it would be a good idea to investigate 
            and declar only the classes that absolutely must be available in the cluster. -->
        <include>
          <class-expression>demo.continuations.*..*</class-expression>
        </include>
      </instrumented-classes>
      <!-- These methods (originating from local objects) operates on objects declared as shared. This
           section tells DSO to assume a lock on those objects for the duration of the call; essentially this
           section declares that all methods found for all classes found for all packages should assume the
           behavior described -->
      <locks>
        <autolock>
          <method-expression>* demo.continuations.*..*.*(..)</method-expression>
          <lock-level>write</lock-level>
        </autolock>
      </locks>
    </dso>
  </application>
</tc:tc-config>
