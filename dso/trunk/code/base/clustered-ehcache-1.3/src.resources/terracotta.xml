<?xml version = "1.0" encoding="UTF-8"?>
<!--

  All content copyright (c) 2007 Terracotta, Inc.,
  except as may otherwise be noted in a separate copyright notice.
  All rights reserved

-->
<xml-fragment>
  <instrumented-classes>
    <include>
      <class-expression>net.sf.ehcache.*..*</class-expression>
    </include>

    <include>
      <class-expression>net.sf.ehcache.CacheManager</class-expression>
      <on-load>
        <execute><![CDATA[self.cacheManagerEventListenerRegistry = new net.sf.ehcache.event.CacheManagerEventListenerRegistry();]]></execute>
      </on-load>
    </include>
  </instrumented-classes>

  <transient-fields>
    <field-name>net.sf.ehcache.CacheManager.cacheManagerEventListenerRegistry</field-name>
    <field-name>net.sf.ehcache.CacheManager.cacheManagerPeerListener</field-name>
    <field-name>net.sf.ehcache.CacheManager.cacheManagerPeerProvider</field-name>
    <field-name>net.sf.ehcache.CacheManager.shutdownHook</field-name>
    <field-name>net.sf.ehcache.Element.nextToLastAccessTime</field-name>
    <field-name>net.sf.ehcache.Element.lastAccessTime</field-name>
    <field-name>net.sf.ehcache.Element.hitCount</field-name>
  </transient-fields>

  <roots>
    <root>
      <field-name>net.sf.ehcache.CacheManager.ALL_CACHE_MANAGERS</field-name>
    </root>
    <root>
      <field-name>net.sf.ehcache.CacheManager.singleton</field-name>
    </root>
    <root>
      <field-name>net.sf.ehcache.store.MemoryStoreEvictionPolicy.LRU</field-name>
    </root>
    <root>
      <field-name>net.sf.ehcache.store.MemoryStoreEvictionPolicy.LFU</field-name>
    </root>
    <root>
      <field-name>net.sf.ehcache.store.MemoryStoreEvictionPolicy.FIFO</field-name>
    </root>
    <root>
      <field-name>net.sf.ehcache.store.MemoryStoreEvictionPolicy.DSO</field-name>
    </root>
  </roots>

  <locks>
    <named-lock>
      <lock-name>__ehcache_lock__CacheManager.init</lock-name>
      <method-expression>* net.sf.ehcache.CacheManager.init(..)</method-expression>
      <lock-level>write</lock-level>
    </named-lock>
    <autolock auto-synchronized="true">
      <lock-name>__ehcache_lock__CacheManager.clearAll</lock-name>
      <method-expression>* net.sf.ehcache.CacheManager.clearAll(..)</method-expression>
      <lock-level>write</lock-level>
    </autolock>
    <autolock auto-synchronized="true">
      <lock-name>__ehcache_lock__CacheManager.getCacheManagerEventListener</lock-name>
      <method-expression>* net.sf.ehcache.CacheManager.getCacheManagerEventListener(..)</method-expression>
      <lock-level>write</lock-level>
    </autolock>
    <autolock auto-synchronized="true">
      <lock-name>__ehcache_lock__CacheManager.getCacheManagerPeerProvider</lock-name>
      <method-expression>* net.sf.ehcache.CacheManager.getCacheManagerPeerProvider(..)</method-expression>
      <lock-level>read</lock-level>
    </autolock>
    <autolock auto-synchronized="true">
      <lock-name>__ehcache_lock__CacheManager.getCachePeerProvider</lock-name>
      <method-expression>* net.sf.ehcache.CacheManager.getCachePeerProvider(..)</method-expression>
      <lock-level>read</lock-level>
    </autolock>
    <autolock auto-synchronized="true">
      <lock-name>__ehcache_lock__CacheManager.getStatus</lock-name>
      <method-expression>* net.sf.ehcache.CacheManager.getStatus(..)</method-expression>
      <lock-level>read</lock-level>
    </autolock>
    <autolock auto-synchronized="true">
      <lock-name>__ehcache_lock__CacheManager.setCacheManagerEventListener</lock-name>
      <method-expression>* net.sf.ehcache.CacheManager.setCacheManagerEventListener(..)</method-expression>
      <lock-level>write</lock-level>
    </autolock>
    <autolock auto-synchronized="true">
      <lock-name>__ehcache_lock__CacheManager.shutdown</lock-name>
      <method-expression>* net.sf.ehcache.CacheManager.shutdown(..)</method-expression>
      <lock-level>write</lock-level>
    </autolock>
    <autolock>
      <method-expression>* net.sf.ehcache.CacheManager.addCache(..)</method-expression>
      <lock-level>write</lock-level>
    </autolock>
    <autolock>
      <method-expression>* net.sf.ehcache.CacheManager.addCacheNoCheck(..)</method-expression>
      <lock-level>write</lock-level>
    </autolock>
    <autolock>
      <method-expression>* net.sf.ehcache.CacheManager.cacheExists(..)</method-expression>
      <lock-level>read</lock-level>
    </autolock>
    <autolock>
      <method-expression>* net.sf.ehcache.CacheManager.getCache(..)</method-expression>
      <lock-level>read</lock-level>
    </autolock>
    <autolock>
      <method-expression>* net.sf.ehcache.CacheManager.getCacheNames(..)</method-expression>
      <lock-level>read</lock-level>
    </autolock>
    <autolock>
      <method-expression>* net.sf.ehcache.CacheManager.getEhcache(..)</method-expression>
      <lock-level>read</lock-level>
    </autolock>
    <autolock>
      <method-expression>* net.sf.ehcache.CacheManager.removalAll(..)</method-expression>
      <lock-level>write</lock-level>
    </autolock>
    <autolock>
      <method-expression>* net.sf.ehcache.CacheManager.removeCache(..)</method-expression>
      <lock-level>write</lock-level>
    </autolock>
    <autolock>
      <method-expression>* net.sf.ehcache.CacheManager.replaceCacheWithDecoratedCache(..)</method-expression>
      <lock-level>write</lock-level>
    </autolock>

  </locks>
</xml-fragment>
