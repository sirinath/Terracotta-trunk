<?xml version="1.0" encoding="UTF-8" ?>
<!--

  All content copyright (c) 2003-2008 Terracotta, Inc.,
  except as may otherwise be noted in a separate copyright notice.
  All rights reserved.

-->
<!--
  tc-config-reference.xml

  This is a sample Terracotta configuration file. In it, you will find an
  example of every permitted element, along with a brief description of each.
  As such, it's a good reference, but vastly more than you need to get started.
  Very few of the elements in this configuration file are required; they are
  marked with a (REQUIRED) notation.
-->
<tc:tc-config xmlns:tc="http://www.terracotta.org/config"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    >

  <!--
    This section defines the servers present in your Terracotta system. You can
    omit this section entirely, in which case it behaves as if there's a
    single server with all values set at their default. You can include exactly
    one server entry here (the common case), or, if you're going to run multiple
    servers for failover, you can include multiple servers here.

    If you include more than one server here, note that each server will need to know
    which configuration it should use as it starts up. If you name your servers
    according to the host that they run on (and no host contains more than
    one server), then they will find the hostname themselves and work
    automatically.

    If you name your servers in any other fashion (and, again, only if there is
    more than one 'server' element present here), then you will need to pass the
    command-line option "-n <name>" to the start-tc-server script, passing it
    the name of a server configuration from this file.
  -->
  <servers>

    <!-- The host and symbolic name of the server; host defaults to the server name
    	if it is provided in the config else it defaults to "%i" (the machine's
       IP address) and name defaults to "host:tsa-port".  Expansion parameters may be
       used in both attributes. -->
    <server host="my.host.name" name="My Server Name">

      <!-- Where should the server store its persistent data? (This includes
         stored object data for DSO.) This value undergoes parameter substitution
         before being used; this allows you to use placeholders like '%h' (for the hostname)
         or '%(com.mycompany.propname)' (to substitute in the value of
         Java system property 'com.mycompany.propname'). Thus, a value
         of 'server-data-%h' would expand to 'server-data-my.host.name' if 
         running on host 'my.host.name'.

         If this is a relative path, then it is interpreted relative to
         the current working directory of the server (that is, the directory
         you were in when you started the server). It is thus recommended that
         you specify an absolute path here.

         Default: 'data'; this places the 'data' directory in the
         directory you were in when you invoked 'start-tc-server'.
      -->
      <data>/opt/terracotta/server-data</data>

      <!-- In which directory should the server store its log files? Again,
         this value undergoes parameter substitution before being used;
         thus, a value like 'server-logs-%h' would expand to
         'server-logs-my.host.name' if running on host 'my.host.names'.

         If this is a relative path, then it is interpreted relative to
         the current working directory of the server (that is, the directory
         you were in when you started server). It is thus recommended that
         you specify an absolute path here.

         Default: 'logs'; this places the 'logs' directory in the
         directory you were in when you invoked 'start-tc-server'.
      -->
      <logs>/opt/terracotta/server-logs</logs>
      
      <!-- The directory where the database files will be stored when the 
      	  server db backup is initiated.

         Default: 'data-backup'; this places the 'data-backup' directory in the
         directory you were in when you invoked 'start-tc-server'.
      -->
      <data-backup>/opt/terracotta/server-data-backup</data-backup>

      <!-- On what port should the DSO server listen for connections from DSO
         clients? This can be any port you like, but note that
         ports below 1024 typically require 'root' privileges to use
         on Un*x-style systems (Linux, Solaris).

         Default: 9510
      -->
      <tsa-port>9510</tsa-port>

      <!-- On what port should the server listen for connections from the
         Terracotta administration console? This can be any port you
         like, but note that ports below 1024 typically require 'root'
         privileges to use on Un*x-style systems (Linux, Solaris).

         Default: 9520
      -->
      <jmx-port>9520</jmx-port>

      <!-- On what port should the server listen for communication from
         other servers participating in an networked-active-passive setup.
         This can be any port you like, but note that ports below 1024
         typically require 'root' privileges to use on Un*x-style systems
         (Linux, Solaris).

         Default: 9530
      -->
      <tsa-group-port>9530</tsa-group-port>

      <!-- How much time (in seconds) should the DSO server, upon restart, allow for previously
           connected clients to reconnect?  After this period, clients will
           not be allowed to reconnect.
           
           Default: 120 seconds
      --> 
      <client-reconnect-window>120</client-reconnect-window>
      
      <!-- Information about how DSO should persist data to disk. -->
      <persistence>
        <!-- Configure whether or not the L2 should be restartable.
             
             enabled=true, the L2 will persist its state to disk.
             
             enabled=false, the L2 will not persist state to disk.
             
             Note: the L2 will keep everything in memory regardless of the restartable setting.

             Default: enabled=false
        -->
        <restartable enabled="false"/>
        
        <!-- Information about how servers use off-heap memory. -->
        <offheap>
          
          <!-- If 'true', active servers spill cached data to off-heap memory
               before persisting it to disk. Data that is cached  off-heap 
               provides faster access than data stored on disk.
               
               Default: false
          -->
          <enabled>false</enabled>
          
          <!-- Sets the maximum amount of off-heap memory that a server
               can use. Values are given in k (Kilobytes), m (Megabytes)
               or g (Gigabytes). 
               
               Default: none
          -->
          <maxDataSize>5g</maxDataSize>
        </offheap>
        
      </persistence>
      
      <!-- Information about how DSO should perform distributed
           garbage collection on the data underneath your
           application's roots. -->
      <garbage-collection>
        
        <!-- If 'true', distributed garbage collection is enabled.
             You should only set this to 'false' if you are
             absolutely certain that none of the data underneath
             your roots will ever become garbage; certain 
             applications, such as those that read a large amount
             of data into a Map and never remove it (merely look up
             values in it) can safely do this.

             A setting of 'false' can also be used if distributed
             garbage collection will be triggered externally
             with the 'run-dgc' script

             Default: true
        -->
        <enabled>true</enabled>
        
        <!-- If 'true', the DSO server will emit extra information 
             to the log file when it performs distributed garbage
             collection; this can be useful when trying to
             performance-tune your application.
             
             Default: false
        -->
        <verbose>false</verbose>
        
        <!-- How often should the DSO server perform distributed 
             garbage collection, in seconds?
             
             Default: 3600 (60 minutes)
        -->
        <interval>3600</interval>
      </garbage-collection>
    </server>

    <!-- This additional <server> element is just to illustrate 
       that multiple server definitions can be listed
    -->
    <server host="broccoli">
      <data>/usr/local/tc/data</data>
      <logs>/usr/local/tc/logs</logs>

      <tsa-port>8510</tsa-port>

      <persistence>
        <restartable enabled="false"/>
      </persistence>
      
      <garbage-collection>
        <enabled>true</enabled>
        <verbose>true</verbose>
        <interval>3600</interval>
      </garbage-collection>
    </server>
    
    <!-- This section lets you divide your servers in groups. Each 
		group can be made of one or more servers out of which 1 server 
		will act as an Active server i.e. each group will have 1 Active 
		server. You can omit this section if you want to have only
		1 Active server in the cluster. 
    --> 
	<mirror-groups>
		<!-- Each group can also be assigned a group name. Each group has members 
			which are actually the "name" of the server specified above. More than
			one member can be present in a member group.
		-->
		<mirror-group group-name="group1" election-time="5">
			<members>
				<member>server1</member>
			</members>
		</mirror-group>
		<mirror-group>
			<members>
				<member>server2</member>
			</members>
		</mirror-group>
	</mirror-groups>
    

    <!-- This element lets you control if and how often the Terracotta server
       will check for update versions of the Terracotta platform.

    -->
    <update-check>
      <!-- This element determines if the server will check for updates
         to the version of the Terracotta platform your are using. The server
         will contact the terracotta.org website and compare the version of
         your software with a registry of current releases. Information about
         new versions will be logged and displayed on the server's standard
         output.

         Default: 'false'
      -->
      <enabled>true</enabled>
      
      <!-- This element controls the period, in days, between update checks
         given that update checking is enabled. When checking is enabled, each
         time the server starts an update check is performed as well as at
         subsequent intervals, according to this value.

         Default: 7
      -->
      <period-days>10</period-days>
    </update-check>
  </servers>

  <!-- This section contains settings that affect all clients that connect to the
     system.

     Note that while these settings are applied uniformly across all clients,
     this does not prevent you from applying different settings to various
     clients. There are two ways of doing this:

      - Certain parameters ('logs', below) undergo parameter expansion
        before being used by the client. This allows you to use various predefined
        substitutions (like '%h' for host), or a general one
        (%(myprop) to use the value of Java system property 'myprop'), for
        these values; expansions are carried out in each client's JVM
        independently.  Parameter expansion is not done for values inside the
        <modules> element.
  -->
  <clients>

    <!-- Where should the client write its log files?

       This value undergoes parameter substitution before being used;
       thus, a value like 'client-logs-%h' would expand to
       'client-logs-banana' if running on host 'banana'.

       If this is a relative path, then it is interpreted relative to
       the current working directory of the client (that is, the directory
       you were in when you started the program that uses Terracotta
       services). It is thus recommended that you specify an absolute
       path here.

       Default: 'logs-%i'; this places the logs in a directory relative
       to the directory you were in when you invoked the program that uses
       Terracotta services (your client), and calls that directory, for example,
       'logs-10.0.0.57' if the machine that the client is on has assigned IP
       address 10.0.0.57.
    -->
    <logs>logs-%i</logs>

  </clients>

</tc:tc-config>
